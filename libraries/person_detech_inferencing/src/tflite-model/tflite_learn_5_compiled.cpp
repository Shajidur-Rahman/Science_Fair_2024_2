/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 26.04.2024 09:32:23

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238528;
#else
constexpr int kTensorArenaSize = 237504;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0030296039767563343, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 55814, -57806, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 8.8569562649354339e-05, 8.545725722797215e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 73,-50,-57,98,-78,-1,-53,54,127,-8,-54,-33,-28,61,-23,15,120,-99,-42,-96,92,60,59,-74,-56,-94,-17,71,13,-57,4,58, 
  /* [1][0][][] */ 52,81,79,-62,-74,81,-7,18,-38,-39,44,113,120,48,28,2,-39,2,-59,-91,-78,38,43,115,91,80,-52,-3,99,-127,-111,-15, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0036337363999336958, 0.0035060481168329716, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -275, 336, 341, -344, -410, 381, -404, 315, -271, 1200, 353, 344, 364, 347, -305, -543, -373, -209, -378, -328, -377, 229, 518, 335, 269, 284, -110, -319, -579, 621, 83, -400, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.0645387091208249e-05, 5.4823016398586333e-05, 5.4083622671896592e-05, 5.1944327424280345e-05, 5.1694078138098121e-05, 5.064293509349227e-05, 5.3257557738106698e-05, 5.4133630328578874e-05, 5.5879929277580231e-05, 6.0471586039057001e-05, 5.6361688621109352e-05, 5.4668798838974908e-05, 5.4106731113279238e-05, 5.2885996410623193e-05, 5.7393517636228353e-05, 5.345913814380765e-05, 4.8190420784521848e-05, 6.5172462200280279e-05, 5.028331361245364e-05, 5.1840637752320617e-05, 4.8712649004301056e-05, 5.0528160500107333e-05, 5.5548320233356208e-05, 5.5224678362719715e-05, 5.5411441280739382e-05, 5.3933494200464338e-05, 5.2311999752419069e-05, 5.2471405069809407e-05, 5.4243097110884264e-05, 5.7137382100336254e-05, 6.0915739595657215e-05, 5.437917570816353e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -41,-61,105,2,95,-17,-99,-113,65,-107,-119,-9,52,4,-47,50,-61,-41,-72,-67,-79,-120,-4,109,-126,1,75,-56,110,-4,-30,-96,82,-72,-108,67,-127,-94,-106,23,72,-100,-107,100,51,-120,110,-28, 
  /* [1][0][][] */ -58,32,-64,6,-28,89,48,19,94,-93,-107,109,77,-18,34,76,105,-35,38,127,-37,2,40,38,50,28,-54,116,21,17,105,-55,47,113,0,33,56,67,-6,-53,-52,19,-15,-101,-37,46,-28,-68, 
  /* [2][0][][] */ 44,36,-54,102,-11,-51,100,105,-86,95,-40,121,103,-7,93,-101,-62,-22,37,64,-87,-8,116,32,-10,91,91,18,-59,92,86,105,-83,-12,-84,-104,-82,101,114,-16,-107,-64,21,-11,-87,127,-23,-92, 
  /* [3][0][][] */ 74,14,35,-29,-82,47,-126,35,45,16,70,-2,90,95,70,1,108,98,-63,9,115,-98,-73,-126,-35,-127,-84,107,40,-111,85,2,-60,-42,-22,-20,-102,-29,37,43,-35,-104,-107,1,72,24,-57,-90, 
  /* [4][0][][] */ 49,103,-7,49,-37,-32,24,8,55,87,-11,47,21,-46,-21,-77,-28,-12,-74,7,104,-103,83,19,-29,-12,64,-68,-59,28,-78,-64,69,113,8,-114,-59,-14,-127,42,-61,-74,-85,-98,28,103,30,55, 
  /* [5][0][][] */ 103,-99,90,97,54,-114,40,70,127,-116,-5,-67,37,114,48,50,64,71,-75,114,44,63,23,-18,-96,-57,-26,-89,62,44,25,-96,-48,11,-65,23,-117,-33,58,35,-84,-43,51,104,-36,35,42,-68, 
  /* [6][0][][] */ 11,-49,109,72,-92,-71,-8,61,-22,-89,2,-96,81,51,110,-126,40,-4,-6,98,-85,-127,106,54,-69,-90,-13,-65,-34,-122,42,-85,-97,-126,-52,-113,-15,34,-116,76,81,51,18,-22,-118,102,-92,-50, 
  /* [7][0][][] */ 122,64,-33,-37,-66,123,-12,9,127,11,-102,19,65,-82,54,81,54,24,2,122,63,41,0,96,-62,108,38,60,-70,116,-16,44,23,31,75,107,-103,90,-4,-21,102,-68,95,70,53,7,103,-121, 
  /* [8][0][][] */ 16,37,-49,-96,48,18,-85,-31,-6,28,58,90,-7,-50,-92,-81,-62,89,-63,7,20,-30,77,96,-127,81,61,66,-77,7,-92,104,109,-40,39,-3,111,-1,-24,57,70,88,-114,-106,13,-36,-17,127, 
  /* [9][0][][] */ 41,39,127,68,94,-78,-31,-83,36,67,13,76,-15,-42,-74,-6,48,34,-65,-41,23,118,-59,-81,104,8,27,36,2,-46,-51,112,93,25,48,18,-42,35,-4,-20,62,-53,80,-46,92,40,-63,90, 
  /* [10][0][][] */ -61,79,96,-56,-4,110,115,38,52,38,21,-60,109,87,-22,22,-40,83,-92,-51,-8,36,59,-56,46,63,-127,-99,-36,89,-83,-68,70,105,124,75,-34,13,-24,45,-24,124,-100,-38,-93,-46,1,-71, 
  /* [11][0][][] */ 109,11,-8,111,127,54,64,41,124,100,-80,116,5,-75,38,-55,-63,-96,66,50,41,82,28,-98,-91,-84,-34,79,90,4,32,-9,-100,-63,61,50,-58,81,-21,-48,-16,116,-67,2,-44,-49,-88,-107, 
  /* [12][0][][] */ 12,64,-47,10,98,18,-23,46,-61,69,-26,19,-32,22,60,-68,-105,-27,-45,-70,38,-2,22,110,-52,-39,83,-90,105,27,-30,127,-103,-60,-36,21,2,-68,-9,55,126,53,-103,-46,-30,-72,-38,101, 
  /* [13][0][][] */ 115,-64,112,107,106,127,93,77,87,-98,8,-24,105,82,78,-39,-121,-66,-69,39,80,-21,127,-37,-54,50,-2,27,-80,-81,91,48,33,115,-12,44,-81,-25,34,81,-56,91,-45,11,-44,39,0,-42, 
  /* [14][0][][] */ -73,-95,83,68,70,-26,-13,-116,-80,-45,51,62,-30,-83,-90,-78,-66,-79,-6,24,-45,24,-14,63,-111,-71,-57,28,-104,-118,-99,30,75,-18,-38,-2,82,108,25,-107,-11,-100,27,72,48,-127,33,-106, 
  /* [15][0][][] */ 11,-42,-40,64,76,-97,49,-108,45,-12,-91,-6,93,-7,-106,-127,89,2,-108,13,38,7,66,100,59,49,45,75,9,42,51,-115,10,-3,-74,-13,-82,95,96,-84,-1,100,-56,-29,12,-88,-61,-85, 
  /* [16][0][][] */ -73,2,109,-76,36,118,-73,35,40,46,-117,77,-27,-62,-69,-79,127,85,78,64,114,82,-47,48,-54,51,-57,61,-125,3,39,4,-98,78,55,63,-43,54,-64,-89,15,-65,75,111,77,106,113,5, 
  /* [17][0][][] */ -2,-83,31,85,-10,-84,-30,-63,65,-59,62,49,105,64,-74,67,3,20,73,116,-56,-6,-11,-19,51,83,-97,48,114,-19,-10,86,-59,-1,31,-16,-40,99,-63,3,-57,-5,-31,-40,-15,12,72,-127, 
  /* [18][0][][] */ -106,106,109,-81,-18,-126,-120,-2,-15,71,-121,-58,-40,29,56,-69,21,-33,55,-34,102,-57,16,-93,21,-112,-20,113,23,28,-7,38,47,-36,-122,-119,-43,31,-40,61,-53,-10,-62,-14,-127,9,22,-9, 
  /* [19][0][][] */ 19,30,75,37,56,-91,96,91,92,-69,29,-16,-101,31,-62,59,83,-111,112,56,-26,80,-61,10,75,-87,33,-74,-99,-127,-71,44,87,-89,31,-4,6,-74,-59,-109,42,-125,-90,8,-89,27,84,-88, 
  /* [20][0][][] */ -13,76,72,99,-102,96,15,58,9,9,-95,-1,-14,91,39,-87,-56,-45,-75,-41,19,-55,-89,-85,79,-86,-113,48,19,8,-49,119,112,44,-22,57,42,-39,-24,-127,-100,-46,-104,-117,-29,-77,-78,119, 
  /* [21][0][][] */ 96,72,80,-107,109,-75,87,28,8,-64,-83,46,14,46,-48,-92,-125,-31,31,-8,122,-49,73,-80,71,-87,-69,85,24,13,-7,-16,-25,24,-93,-126,120,106,-127,-29,-2,16,36,-31,-108,-80,-98,70, 
  /* [22][0][][] */ 45,-77,-62,-86,98,-40,120,70,-82,65,-86,-94,127,-116,-98,-77,35,97,-95,-46,100,-61,41,44,104,6,-116,95,-45,-62,-57,-94,45,68,32,22,9,-15,-47,-105,14,-1,13,78,52,-100,90,-27, 
  /* [23][0][][] */ 57,-90,11,64,104,-105,14,-90,69,-73,78,77,28,-99,27,-30,76,-30,-105,107,100,-74,104,-24,-2,-5,59,30,79,57,75,-29,-61,50,27,36,99,-2,-103,16,-95,11,15,-127,-78,-80,111,8, 
  /* [24][0][][] */ -79,-74,-101,-62,-72,-98,-55,-78,80,124,70,48,127,68,-27,-104,-85,48,32,-40,106,-73,-54,-22,69,-18,60,62,119,68,10,-50,-16,16,59,30,-53,-88,69,-8,-63,-81,108,-7,20,-27,47,59, 
  /* [25][0][][] */ -95,-83,-79,-2,104,-61,-89,65,64,-103,-60,25,86,6,-100,-11,-79,64,35,-99,80,90,-13,-45,31,-42,-123,49,90,-76,45,127,74,-102,53,73,99,-61,-15,-6,-75,113,-101,-21,94,51,69,17, 
  /* [26][0][][] */ 69,-115,-18,-16,-104,-6,-15,-16,-115,-127,124,94,-76,-51,12,-20,119,33,-66,-71,12,76,105,11,53,67,29,55,10,4,-95,-3,-16,-66,-102,-99,-62,102,-53,111,-101,102,59,45,-44,75,-41,116, 
  /* [27][0][][] */ 11,9,-67,-110,-127,-76,-77,-23,38,98,39,-114,-10,53,81,-30,66,-21,62,-90,-102,7,-34,-28,-110,45,-112,-5,62,24,-39,-15,62,67,-97,-93,-96,-62,-116,86,-101,16,23,18,98,20,65,103, 
  /* [28][0][][] */ 75,-17,72,30,-127,-78,-109,-88,-40,-117,49,56,-94,-99,-9,88,77,98,-86,60,-40,9,-122,-88,-125,68,-98,-75,-87,-86,-14,-32,-117,2,66,59,4,-121,-54,18,91,30,-107,37,-119,-23,2,34, 
  /* [29][0][][] */ 58,97,69,-35,-57,9,-112,6,84,-12,-49,-64,103,-87,-35,-11,-80,112,40,-57,-67,-10,75,0,-29,33,-26,-14,-100,-12,117,9,66,18,-65,-39,16,127,18,105,71,95,-33,96,12,103,-40,7, 
  /* [30][0][][] */ 27,-19,-44,62,-77,26,-54,-13,101,-15,8,-31,-80,16,56,38,-5,32,84,-85,35,-83,-97,25,-97,31,-60,109,-6,-98,-82,6,-73,-30,-96,-47,23,-1,4,27,88,-57,-9,127,95,-40,91,58, 
  /* [31][0][][] */ 79,-98,31,94,42,57,-67,-106,-37,-24,-85,-93,92,-127,-54,104,-59,-94,33,43,57,30,-35,100,36,-122,41,32,-80,-81,41,102,24,14,-98,-13,92,-38,-76,-119,52,-76,-36,33,3,-59,-39,33, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.002152428962290287, 0.0023299781605601311, 0.0022985539399087429, 0.0022076338063925505, 0.0021969983354210854, 0.0021523246541619301, 0.0022634461056441069, 0.0023006792180240154, 0.0023748970124870539, 0.0025700423866510391, 0.0023953716736286879, 0.0023234239779412746, 0.0022995360195636749, 0.0022476548328995705, 0.0024392243940383196, 0.0022720133420079947, 0.002048092894256115, 0.0027698294725269079, 0.0021370407193899155, 0.0022032270208001137, 0.0020702874753624201, 0.0021474468521773815, 0.0023608035407960415, 0.0023470488376915455, 0.0023549862671643496, 0.0022921734489500523, 0.0022232600022107363, 0.0022300346754491329, 0.002305331639945507, 0.0024283386301249266, 0.0025889188982546329, 0.0023111149203032255, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 1901, -1315, 4123, 2325, 3360, -4, 2597, 4143, -1964, -1048, -982, 8918, 2678, 2482, 5043, -4750, -3305, 7277, 2338, 5234, 5399, 22291, 22714, 887, -1583, 1678, -792, -827, 2748, 2282, 5431, 7831, -1095, 229, 7996, 3726, 7400, 2229, 1465, -1599, 4360, -2037, 7752, -184, 216, 2002, -1593, 4884, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00018594633729662746, 0.00026372977299615741, 0.0001774035335984081, 0.00023984172730706632, 0.00015499985602218658, 0.00018244054808747023, 0.00013475665764417499, 0.00018414140504319221, 0.00021712493617087603, 0.00034042145125567913, 0.00031292717903852463, 8.7106971477624029e-05, 0.00024614145513623953, 0.00022671715123578906, 0.0001761262392392382, 0.00012213527224957943, 0.00018190919945482165, 0.00013176044740248471, 0.00025590445147827268, 0.00014970995835028589, 0.00014357872714754194, 4.8721558414399624e-05, 4.3816602556034923e-05, 0.00021040215506218374, 0.00025467455270700157, 0.00014992408978287131, 0.00015775579959154129, 0.00025945436209440231, 0.00016345923359040171, 0.00018744631961453706, 0.00012447178596630692, 0.00011100745905423537, 0.00016528682317584753, 0.00026004496612586081, 0.00011016238568117842, 0.00016409537056460977, 0.00011275108408881351, 0.00026741914916783571, 0.00024659122573211789, 0.00022208850714378059, 0.000129079504404217, 0.00022485322551801801, 0.00011277777230134234, 0.00026842206716537476, 0.00038823962677270174, 0.00025763481971807778, 0.00027693994343280792, 0.00015350236208178103, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -17,15,127,-14,-7,49,-9,-83, 
  /* [1][0][][] */ 92,-66,71,-81,-13,-67,127,27, 
  /* [2][0][][] */ 64,57,79,-78,-62,29,127,-28, 
  /* [3][0][][] */ -3,34,1,-17,14,-75,127,11, 
  /* [4][0][][] */ 127,-42,-63,-36,-108,-73,-27,82, 
  /* [5][0][][] */ 29,68,127,-6,27,-39,28,-46, 
  /* [6][0][][] */ 107,115,-21,127,-84,20,17,96, 
  /* [7][0][][] */ -30,-3,-5,39,29,-125,-127,-33, 
  /* [8][0][][] */ 101,72,-46,79,-63,21,-127,-47, 
  /* [9][0][][] */ 127,-26,-34,44,5,-37,21,-85, 
  /* [10][0][][] */ 74,22,-10,12,-30,127,37,8, 
  /* [11][0][][] */ 127,-19,-15,-119,92,-74,-68,85, 
  /* [12][0][][] */ -61,112,72,-33,8,60,-86,127, 
  /* [13][0][][] */ 127,-5,-89,8,32,-78,25,-96, 
  /* [14][0][][] */ 103,34,-4,-15,-127,25,-75,-13, 
  /* [15][0][][] */ 22,5,-106,-39,-127,-46,125,109, 
  /* [16][0][][] */ 0,-57,118,-8,127,-43,-63,-31, 
  /* [17][0][][] */ 23,-21,82,-14,127,-50,-64,-3, 
  /* [18][0][][] */ 118,-49,127,46,-27,37,-34,-5, 
  /* [19][0][][] */ 60,50,48,-59,-44,-127,18,-38, 
  /* [20][0][][] */ 42,-38,60,127,6,-66,-89,86, 
  /* [21][0][][] */ 89,-10,-77,-127,52,-66,4,111, 
  /* [22][0][][] */ -58,-127,-70,-56,48,-40,119,-66, 
  /* [23][0][][] */ -13,18,34,-47,-109,-127,7,-30, 
  /* [24][0][][] */ 127,3,61,45,-7,-23,-94,72, 
  /* [25][0][][] */ 120,56,-25,-88,-14,-4,-16,127, 
  /* [26][0][][] */ -90,-29,26,-127,106,-1,-45,-89, 
  /* [27][0][][] */ 101,127,-6,-49,6,56,26,6, 
  /* [28][0][][] */ 14,127,-2,16,-5,-61,-17,108, 
  /* [29][0][][] */ 112,30,92,119,43,-46,-127,61, 
  /* [30][0][][] */ 127,-111,-90,119,50,0,-81,102, 
  /* [31][0][][] */ 98,-82,26,51,-80,-103,-127,58, 
  /* [32][0][][] */ -85,-73,24,-127,79,-13,-37,-77, 
  /* [33][0][][] */ 25,4,34,24,32,-67,127,39, 
  /* [34][0][][] */ -60,77,125,-92,127,-76,-90,107, 
  /* [35][0][][] */ -79,27,19,124,-9,127,38,-21, 
  /* [36][0][][] */ 87,28,-29,-127,46,-6,22,44, 
  /* [37][0][][] */ 41,47,-18,9,-77,127,62,48, 
  /* [38][0][][] */ -27,-67,22,113,14,51,5,127, 
  /* [39][0][][] */ 16,2,-127,43,-8,-38,-26,67, 
  /* [40][0][][] */ 71,10,-93,-2,-44,60,-57,127, 
  /* [41][0][][] */ 30,5,13,-42,-105,-127,-13,-1, 
  /* [42][0][][] */ -78,53,-85,101,-7,92,-27,-127, 
  /* [43][0][][] */ -9,1,-32,-127,-20,5,-10,-74, 
  /* [44][0][][] */ 63,20,25,64,27,127,-38,35, 
  /* [45][0][][] */ 4,71,-22,15,127,-30,-73,-14, 
  /* [46][0][][] */ 60,-67,1,127,70,24,-50,86, 
  /* [47][0][][] */ -13,-91,48,-17,127,20,47,29, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0023351097479462624, 0.0033119122963398695, 0.0022278293035924435, 0.0030119267757982016, 0.0019464845536276698, 0.0022910840343683958, 0.0016922709764912724, 0.0023124434519559145, 0.0027266498655080795, 0.0042750043794512749, 0.0039297319017350674, 0.0010938872583210468, 0.0030910386703908443, 0.0028471085242927074, 0.0022117891348898411, 0.0015337718650698662, 0.0022844113409519196, 0.0016546446131542325, 0.0032136419322341681, 0.0018800541292876005, 0.0018030581995844841, 0.00061184418154880404, 0.00055024784523993731, 0.0026422252412885427, 0.0031981971114873886, 0.0018827430903911591, 0.0019810935482382774, 0.0032582217827439308, 0.0020527171436697245, 0.0023539464455097914, 0.0015631136484444141, 0.0013940290082246065, 0.0020756679587066174, 0.0032656383700668812, 0.0013834165874868631, 0.0020607057958841324, 0.0014159254496917129, 0.003358243266120553, 0.0030966866761445999, 0.0027889821212738752, 0.0016209774184972048, 0.002823701361194253, 0.0014162606094032526, 0.0033708377741277218, 0.004875503946095705, 0.0032353717833757401, 0.0034778050612658262, 0.0019276789389550686, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -10009, -1489, -1524, -10962, 2038, -3090, 10612, 10226, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00017560477135702968, 0.00020797575416509062, 8.6708743765484542e-05, 0.00012511751265265048, 9.2841291916556656e-05, 0.00015988650557119399, 0.00010205880244029686, 0.0001772144460119307, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-25,18,-24,24,59,2,35,115,-85,60,11,-41,63,16,-41,15,-27,-29,-17,5,-57,7,-23,-50,-33,-46,-36,-32,81,-24,32,26,-35,9,-26,65,-64,-56,0,24,-25,-69,2,51,-25,60,-40, 
  /* [1][0][][] */ 46,-4,-5,64,50,64,14,35,70,-86,-4,0,41,21,-40,-10,-34,-44,-74,-9,4,-47,45,75,0,-59,-11,39,-21,60,-54,127,-20,48,-23,-21,-61,-11,-15,-31,-52,-24,-39,41,15,-5,6,-89, 
  /* [2][0][][] */ -41,-25,-74,29,-76,-35,-7,52,-109,-86,-87,-35,-32,49,-124,-6,71,-86,37,-19,127,84,-29,0,50,93,21,-101,-46,0,59,5,-24,39,75,-69,65,-2,83,96,-44,102,44,-3,-78,69,-42,71, 
  /* [3][0][][] */ 2,-20,-14,41,-22,9,-10,44,80,98,-127,-29,26,-18,-23,83,-59,-14,-11,48,-27,2,72,21,13,14,-59,57,-33,31,-40,-33,11,34,35,22,55,-4,40,-4,-55,83,72,23,26,-10,-30,-38, 
  /* [4][0][][] */ -21,-70,23,-49,6,82,-49,-62,-3,-41,74,34,-55,-20,-12,21,62,16,-20,41,-66,-28,115,-14,-93,-13,-1,12,22,-28,-13,63,-49,40,-18,48,-34,39,-2,23,-30,41,-35,39,127,53,-15,9, 
  /* [5][0][][] */ -63,-62,55,-127,-18,16,-28,-51,-7,70,-53,66,-77,21,50,5,68,51,72,15,31,-1,-11,-61,35,-71,9,-44,-11,-40,35,-70,-12,-45,57,-10,-19,29,37,64,91,17,16,-24,-7,-8,-32,31, 
  /* [6][0][][] */ -60,-62,45,25,-63,-69,8,-65,-101,17,-127,38,15,-49,53,14,-37,23,25,121,-14,-5,80,44,-84,-17,66,17,20,-40,-33,-62,-36,53,66,-98,-40,80,60,-22,-68,62,77,-61,-3,-45,-40,6, 
  /* [7][0][][] */ 19,-4,11,-9,11,30,-49,-47,-127,-34,103,25,8,-29,27,8,18,42,-2,-18,-50,10,-18,-44,43,8,-47,15,-12,-16,-26,-55,-102,-51,-39,10,61,-28,-27,-3,55,-1,51,-17,11,-40,44,15, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.007524177897721529, 0.0089111849665641785, 0.0037152294535189867, 0.0053609390743076801, 0.0039779921062290668, 0.0068506938405334949, 0.0043729371391236782, 0.0075931479223072529, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -2777, 642, 7804, 2376, -1364, -4784, -1443, 11543, 6419, -3750, -3784, -4165, -727, 13208, 7922, 165, 5199, -4799, 3830, -984, 14999, -2736, -1292, -1008, 2454, -1921, -125, -3515, 7242, -20885, -2997, 636, -3562, -2055, -606, -991, 8026, -4386, 634, -10084, -1928, 4796, -4864, -849, 1294, -3489, 6594, -2461, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00034163179225288332, 0.00021458446281030774, 8.2073718658648431e-05, 0.00012834971130359918, 0.00022253397037275136, 0.00012206554674776271, 0.00032042065868154168, 0.00013502614456228912, 0.00019440201867837459, 0.00037367310142144561, 0.00040994989103637636, 7.0319903898052871e-05, 0.00037876871647313237, 8.9675617346074432e-05, 0.00016963671077974141, 0.00029510780586861074, 0.00015040290600154549, 0.00010971394658554345, 0.00018438028928358108, 0.00039397471118718386, 0.00011209846707060933, 0.00028815006953664124, 0.00023289283853955567, 0.00028936803573742509, 0.00025589033612050116, 0.00059855316067114472, 0.00033338359207846224, 0.00044598150998353958, 0.00010176403156947345, 9.7363990789745003e-05, 0.00021686838590539992, 0.00021696246403735131, 9.6215822850354016e-05, 0.0004073494637850672, 0.00010565479897195473, 0.00015221424109768122, 0.00019417582370806485, 0.00010584123810986057, 6.9389439886435866e-05, 0.00011142271978314966, 0.00027563373441807926, 0.00016894673171918839, 0.00029512544278986752, 0.00015145748329814523, 0.00019323005108162761, 8.2650316471699625e-05, 0.00021622091298922896, 0.00021266599651426077, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 76,67,-17,48,4,-4,-55,12,33,-89,36,1,18,-100,-27,32,109,32,-73,-1,69,22,-25,-12,70,36,22,0,-72,22,-11,-57,127,10,98,21,-37,23,121,27,-75,74,-100,-58,35,-109,-38,-6, 102,127,-63,89,22,57,-78,-127,42,36,127,26,-15,-13,-18,-12,-63,127,-87,22,46,127,33,-21,23,13,11,127,-127,74,-21,-127,-12,-27,20,88,-82,127,114,45,-127,-84,94,-7,18,24,-127,74, 54,35,-5,31,10,-12,-39,20,27,-89,34,2,9,-73,-24,-29,101,-19,-37,-14,63,27,-27,48,53,72,21,0,-18,13,-19,-35,120,16,77,10,-25,25,100,-3,-42,75,58,66,39,98,15,-19, 
  /* [0][1][][] */ -21,-48,-127,83,24,60,73,-28,29,58,-43,127,127,0,-26,-79,-33,92,80,-16,-113,22,30,-107,28,57,22,12,-18,76,24,46,84,127,36,32,-91,5,-66,91,83,5,89,-127,8,-118,-9,127, 50,-93,-21,-127,127,18,127,-87,-127,127,5,83,-113,127,127,-18,-127,76,19,127,31,-8,127,-7,-127,127,36,-77,-82,26,-127,99,115,-93,39,126,127,65,1,127,123,-71,-13,-7,122,-76,-1,28, -8,-47,-118,46,-13,127,56,-23,25,43,-37,73,-19,15,-32,-23,-74,97,127,-40,-127,24,-58,127,9,20,27,34,46,62,38,34,23,-3,-31,-127,-52,-8,-4,37,47,73,-19,126,-12,127,-28,88, 
  /* [0][2][][] */ -33,-23,-10,17,-11,16,-6,-6,23,-10,5,2,35,-90,-44,32,96,18,7,4,-74,28,-1,-5,21,-8,-9,5,1,29,48,7,34,17,127,-3,-12,56,110,34,15,83,127,-32,-53,-124,4,-8, -127,-8,-86,41,-125,9,-59,-22,17,125,-76,53,-25,-37,-17,127,-88,54,-104,-35,-88,28,5,-33,-17,62,-127,-19,-62,127,66,24,37,-19,33,21,-24,51,-26,54,-60,-127,-119,-34,-127,85,-92,95, -27,-29,-13,11,8,-2,-5,-3,15,-41,-8,-18,-13,-80,-25,1,95,-23,87,11,-73,-3,5,34,18,-16,-10,-2,10,20,42,8,57,14,78,20,-3,58,127,5,24,85,-60,50,-34,116,2,-34, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.014519350603222847, 0.0091198394075036049, 0.0034881329629570246, 0.0054548624902963638, 0.0094576934352517128, 0.0051877857185900211, 0.013617877848446369, 0.0057386108674108982, 0.0082620857283473015, 0.01588110625743866, 0.017422869801521301, 0.0029885959811508656, 0.016097670421004295, 0.0038112136535346508, 0.00720955990254879, 0.012542081065475941, 0.0063921236433088779, 0.0046628424897789955, 0.0078361621126532555, 0.016743924468755722, 0.0047641848213970661, 0.012246377766132355, 0.009897945448756218, 0.012298141606152058, 0.01087533961981535, 0.02543850801885128, 0.01416880264878273, 0.018954213708639145, 0.0043249712325632572, 0.0041379695758223534, 0.0092169065028429031, 0.0092209046706557274, 0.0040891724638640881, 0.017312351614236832, 0.0044903289526700974, 0.0064691053703427315, 0.0082524726167321205, 0.0044982526451349258, 0.0029490510933101177, 0.0047354656271636486, 0.011714433319866657, 0.0071802358143031597, 0.012542830780148506, 0.0064369430765509605, 0.0082122767344117165, 0.0035126383882015944, 0.0091893887147307396, 0.0090383049100637436, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 32103, 5874, 1140, 949, 4489, 1920, 6696, 4573, 2560, -6320, 11585, 848, 8669, 1666, 5082, 2887, 6516, -836, 8243, 460, 2987, -562, 3037, 6616, 2471, -3912, 2535, 11420, 655, 6348, 2047, 11367, 757, 5686, -697, -1514, 2715, 2448, 201, 1283, 14065, -882, 14108, 3402, 993, 4808, 5711, -1744, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 3.3201064070453867e-05, 0.00013602369290310889, 0.00023010563745629042, 0.00019722215074580163, 0.00016098430205602199, 0.0002192211541114375, 0.0001195397853734903, 0.00015304630505852401, 0.00017702464538160712, 0.00011548396287253127, 8.2498314441181719e-05, 0.00026442160014994442, 9.4825685664545745e-05, 0.00021013083460275084, 0.00014201033627614379, 0.00013624397979583591, 0.00011267173977103084, 0.00021583259513135999, 0.00010714143718359992, 0.00016290172061417252, 0.00022655044449493289, 0.00016122992383316159, 0.00018347136210650206, 0.00011070283653680235, 0.00016536508337594569, 0.00016157136997207999, 0.00018288445426151156, 8.0889687524177134e-05, 0.0002299782499903813, 0.00012362048437353224, 0.00016308388148900121, 8.5429936007130891e-05, 0.00018847039609681815, 0.00014139604172669351, 0.00017002235108520836, 0.0002314132871106267, 0.00021300821390468627, 0.00016112193407025188, 0.00026565260486677289, 0.00024949849466793239, 6.6476146457716823e-05, 0.00020381834474392235, 6.0755635786335915e-05, 0.00012907695781905204, 0.00021667411783710122, 0.00016427558148279786, 0.00011702867050189525, 0.00019686807354446501, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,38,-24,-9,73,31,6,-59, 
  /* [1][0][][] */ 2,-51,-29,-16,-61,-127,19,19, 
  /* [2][0][][] */ -74,67,0,-54,-53,47,-63,127, 
  /* [3][0][][] */ 52,42,60,-23,-54,-127,46,-16, 
  /* [4][0][][] */ 8,46,-127,34,-117,81,41,35, 
  /* [5][0][][] */ -38,41,34,-33,-84,-127,-63,-12, 
  /* [6][0][][] */ -61,127,102,-28,-75,-36,23,-38, 
  /* [7][0][][] */ -4,4,33,64,-1,-127,-7,53, 
  /* [8][0][][] */ 127,30,-71,70,-85,-61,-106,-6, 
  /* [9][0][][] */ 100,-39,-71,-64,0,-30,-40,127, 
  /* [10][0][][] */ -83,6,4,127,9,74,26,-103, 
  /* [11][0][][] */ 32,19,52,-19,8,110,127,94, 
  /* [12][0][][] */ -81,-88,-36,-82,127,-31,-20,42, 
  /* [13][0][][] */ -33,-12,-15,48,27,-127,37,69, 
  /* [14][0][][] */ 77,84,121,21,68,-127,-91,-18, 
  /* [15][0][][] */ -55,73,127,75,-2,15,50,-88, 
  /* [16][0][][] */ -105,-49,45,-79,127,4,-50,5, 
  /* [17][0][][] */ 44,-50,-52,-2,-14,127,-27,44, 
  /* [18][0][][] */ -17,127,76,-62,-58,52,92,-93, 
  /* [19][0][][] */ 21,112,93,127,-26,40,39,41, 
  /* [20][0][][] */ 3,9,64,-127,-69,-2,61,-11, 
  /* [21][0][][] */ -113,83,43,-127,117,75,125,9, 
  /* [22][0][][] */ 76,-39,-95,65,61,-48,-62,127, 
  /* [23][0][][] */ 33,-85,-127,-34,63,-16,-59,96, 
  /* [24][0][][] */ 50,-15,-100,22,-62,37,-125,127, 
  /* [25][0][][] */ -14,-18,56,14,127,-12,-84,-47, 
  /* [26][0][][] */ 5,106,127,-32,-44,-15,52,-62, 
  /* [27][0][][] */ -30,35,120,-87,31,9,95,-127, 
  /* [28][0][][] */ 61,-6,90,127,70,-35,40,100, 
  /* [29][0][][] */ 62,81,122,25,-68,28,-127,89, 
  /* [30][0][][] */ 56,-13,-99,70,-127,-41,-48,52, 
  /* [31][0][][] */ 18,127,90,-52,-81,38,104,-126, 
  /* [32][0][][] */ 55,-8,-5,29,109,127,37,-29, 
  /* [33][0][][] */ 16,-44,-127,4,28,-21,-40,77, 
  /* [34][0][][] */ 28,-58,18,-127,0,66,-15,11, 
  /* [35][0][][] */ -22,18,90,-4,9,-127,-3,-19, 
  /* [36][0][][] */ -7,13,-36,-127,-10,13,9,-41, 
  /* [37][0][][] */ 65,-19,-27,-91,-79,127,-62,-73, 
  /* [38][0][][] */ 82,-61,-27,94,60,23,-29,127, 
  /* [39][0][][] */ 127,83,30,73,-8,87,-33,-1, 
  /* [40][0][][] */ 49,-112,-127,-26,5,10,-52,107, 
  /* [41][0][][] */ 3,-54,-127,-103,-1,-68,-42,-22, 
  /* [42][0][][] */ 63,114,89,127,-84,-39,33,44, 
  /* [43][0][][] */ 127,-38,-105,-121,-68,-33,24,71, 
  /* [44][0][][] */ 1,69,98,-73,-75,-11,70,-127, 
  /* [45][0][][] */ 35,21,-127,60,-37,31,20,67, 
  /* [46][0][][] */ 52,-52,-91,-127,26,-29,-42,50, 
  /* [47][0][][] */ 92,-121,127,-67,71,-30,16,18, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00047958362847566605, 0.0019648387096822262, 0.0033238362520933151, 0.0028488400857895613, 0.0023253904655575752, 0.003166611772030592, 0.0017267316579818726, 0.0022107274271547794, 0.0025570904836058617, 0.0016681459965184331, 0.0011916739167645574, 0.0038195245433598757, 0.001369740697555244, 0.003035303670912981, 0.0020513148047029972, 0.0019680208060890436, 0.0016275239177048206, 0.0031176647171378136, 0.0015476396074518561, 0.0023530873004347086, 0.003272482194006443, 0.0023289385717362165, 0.0026502122636884451, 0.0015990834217518568, 0.0023886701092123985, 0.0023338706232607365, 0.0026417344342917204, 0.0011684376513585448, 0.0033219961915165186, 0.0017856765771284699, 0.002355718519538641, 0.0012340206885710359, 0.0027224223595112562, 0.0020424413960427046, 0.0024559434968978167, 0.0033427251037210226, 0.0030768669676035643, 0.0023273786064237356, 0.003837306285277009, 0.0036039627157151699, 0.00096023653168231249, 0.002944120904430747, 0.0008776047034189105, 0.0018644945230334997, 0.0031298203393816948, 0.0023729323875159025, 0.0016904589720070362, 0.0028437254950404167, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -12374, -33944, 1639, 5213, -16782, 798, -24418, -354, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00015317433280870318, 7.4879091698676348e-05, 5.5201318900799379e-05, 6.0683913034154102e-05, 8.1583653809502721e-05, 7.4152354500256479e-05, 7.3837778472807258e-05, 6.7687593400478363e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 41,50,-74,51,13,23,-84,-26,2,-22,-2,-33,-19,3,44,2,43,-14,45,-25,20,-30,44,5,14,-21,-16,18,-11,-1,-20,2,42,23,25,14,127,61,33,-21,3,-18,-4,-18,75,25,19,-44, 
  /* [1][0][][] */ 65,30,12,-3,35,87,-7,-29,33,66,-31,-75,112,-19,17,41,28,38,19,-83,127,-29,44,60,50,25,44,14,35,-59,63,79,58,103,7,110,63,26,22,27,77,17,39,30,21,45,103,-72, 
  /* [2][0][][] */ -14,16,77,127,-47,28,-1,53,34,72,24,-83,-41,112,21,32,-75,-90,67,4,8,64,-52,-84,-23,-43,31,-12,-113,23,4,-3,-33,-26,-94,-50,9,18,-80,-18,-18,-48,-30,15,71,-80,-33,27, 
  /* [3][0][][] */ -28,56,-73,-8,18,-75,8,71,99,-78,-39,15,-10,-16,7,58,27,14,-14,-21,-2,24,-76,41,-18,-32,38,-16,67,-27,43,-48,31,-16,-33,-53,-127,1,-82,21,-29,-61,41,0,-55,11,-14,-33, 
  /* [4][0][][] */ 63,-28,31,-26,-69,72,24,70,-127,-61,52,44,79,-68,-73,-62,90,65,75,-37,12,-101,-25,41,-37,-4,-56,-126,-62,-68,93,39,96,0,121,100,72,65,58,33,18,38,-54,-34,97,80,101,-54, 
  /* [5][0][][] */ 30,70,20,97,20,28,-54,-93,-100,19,-19,7,22,57,39,-61,70,100,-19,30,-22,-67,-22,-75,-108,-73,-43,65,-8,37,-34,38,2,-84,71,11,-33,127,-38,-111,-11,-38,-17,-36,0,-12,-33,96, 
  /* [6][0][][] */ 112,49,0,127,-83,31,12,61,17,-84,66,83,81,-46,-26,-46,62,22,-62,29,66,-30,-25,-10,3,58,-38,-37,15,-43,62,55,25,-49,-1,83,95,-75,1,13,-75,72,-105,52,64,102,97,-45, 
  /* [7][0][][] */ 16,19,127,42,-32,60,-82,15,-39,98,-10,-15,42,63,12,-9,-50,-7,-64,6,-6,39,5,-35,-9,47,52,-16,1,5,16,-10,-95,-14,60,28,88,1,37,-9,-28,-34,-29,-54,-4,-32,7,27, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0065099089406430721, 0.0031823613680899143, 0.0023460560478270054, 0.0025790662039071321, 0.0034673053305596113, 0.0031514749862253666, 0.0031381053850054741, 0.0028767227195203304, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 10254, -14428, -821, 1554, -1422, 10257, 2084, -2332, -8902, 1122, -2364, -1673, -6156, -11532, 6645, 2129, -8335, 29411, -748, -11284, 12914, -1520, -977, -1743, -910, -870, -3601, 508, -1204, 1180, 420, 19980, 12877, 974, 5274, 18363, -1289, 19918, 61, -1961, -1118, -7146, -2090, 2550, 2653, 28342, 13003, -2893, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00010424566426081583, 7.5289754022378474e-05, 0.0011619317810982466, 0.00028676274814642966, 0.00025403493782505393, 0.00017131137428805232, 0.00012399160186760128, 0.00039712066063657403, 9.244403918273747e-05, 0.00041659170528873801, 0.0001999949017772451, 0.00013836509606335312, 0.00021827811724506319, 8.1749094533734024e-05, 0.00012916924606543034, 7.9937424743548036e-05, 0.00010283759911544621, 6.249084253795445e-05, 0.00039192324038594961, 6.4569023379590362e-05, 0.00011910556349903345, 0.00042419417877681553, 0.00018663983792066574, 0.00022229291789699346, 0.00030128381331451237, 0.00021811111946590245, 0.00021444547746796161, 0.0002991001820191741, 0.00029801082564517856, 0.00017952913185581565, 0.00016508575936313719, 0.00011016135249519721, 0.00011666498176055029, 0.00021645400556735694, 0.00015142824850045145, 0.00010051698336610571, 0.00071525329258292913, 0.00013838204904459417, 0.00014045335410628468, 0.0004144980339333415, 0.00015592513955198228, 0.0001566018327139318, 0.00028716583619825542, 0.00014150203787721694, 0.00024166489311028272, 4.5151238737162203e-05, 0.00013456671149469912, 0.00019750811043195426, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -42,0,47,13,127,-35,25,12,17,31,45,-14,3,25,-75,17,63,-55,-27,51,-32,16,-48,-3,-21,6,36,-49,-26,127,18,-94,-56,93,127,-93,10,-59,-127,-28,10,-21,-10,-70,-3,-55,-124,18, -43,73,-6,33,-9,-79,111,-12,82,16,48,127,55,127,-23,35,85,-102,0,70,-40,-15,96,-94,-2,44,-98,19,-27,-86,100,-127,-127,-100,18,-40,-59,-40,-119,25,-62,-22,23,-127,21,-114,26,42, -23,-3,12,0,49,-41,27,1,21,25,-3,-39,-6,10,-63,20,43,-50,-22,54,-29,5,-58,6,26,5,34,-108,-35,50,-52,-104,8,-8,113,-63,13,-41,-92,14,15,-8,5,-53,-12,-62,-127,-22, 
  /* [0][1][][] */ -127,115,-21,-62,14,-75,21,-7,25,19,60,40,66,97,-70,32,127,-119,10,88,-32,-51,-87,-31,-127,-2,-30,12,-5,-2,78,-69,-74,127,-104,-88,35,-76,41,73,-117,29,-71,53,-10,-127,11,-49, 14,111,127,127,-38,84,-127,127,127,-127,-74,60,127,119,127,-100,-55,-98,127,10,-127,127,127,6,93,114,74,127,127,-79,127,26,-55,-105,-23,-127,127,127,105,73,-64,127,-17,81,127,33,-9,-127, -61,64,-44,-48,-54,-115,24,-22,-15,6,94,47,39,98,-58,118,105,-127,-13,110,31,-76,-86,-28,33,-14,-22,17,-1,12,78,-60,-10,-32,-118,-66,22,-83,43,-127,-88,27,127,64,-27,-85,-4,109, 
  /* [0][2][][] */ -6,-10,17,-7,35,-36,25,9,49,29,127,54,6,-13,-36,106,80,-33,-49,13,-27,6,-59,48,-11,-8,-32,-23,14,60,2,-12,-21,32,-84,24,-38,-69,59,-33,82,-7,-9,-10,-26,-11,-1,-39, -48,127,21,20,-82,-127,69,-66,85,23,48,-30,-41,21,-58,127,71,21,-4,127,-60,13,75,127,18,-127,127,9,20,-47,-37,-102,12,-61,-83,-107,-64,-83,44,45,127,54,-37,29,-29,-67,-105,-14, 31,-9,33,-1,-8,-38,22,16,48,25,76,38,29,-8,-43,65,57,-30,-57,26,-31,-2,-57,45,18,-12,-32,-63,7,-8,-16,-5,-11,-2,-37,49,-31,-51,63,11,40,3,39,-13,-26,-42,17,23, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0047778990119695663, 0.003450760617852211, 0.053254902362823486, 0.013143217191100121, 0.011643202044069767, 0.0078517263755202293, 0.0056829159148037434, 0.018201259896159172, 0.0042369943112134933, 0.019093677401542664, 0.0091663803905248642, 0.0063416976481676102, 0.010004356503486633, 0.0037468119990080595, 0.0059202234260737896, 0.00366377760656178, 0.0047133630141615868, 0.0028641473036259413, 0.017963046208024025, 0.0029593966901302338, 0.0054589738138020039, 0.019442122429609299, 0.0085542770102620125, 0.01018836721777916, 0.013808762654662132, 0.0099967028945684433, 0.0098286950960755348, 0.013708679936826229, 0.013658751733601093, 0.0082283718511462212, 0.007566387765109539, 0.0050490330904722214, 0.005347114522010088, 0.0099207516759634018, 0.0069404216483235359, 0.0046070022508502007, 0.032782256603240967, 0.0063424743711948395, 0.0064374087378382683, 0.018997717648744583, 0.0071465284563601017, 0.0071775433607399464, 0.013161691837012768, 0.0064854733645915985, 0.011076244525611401, 0.0020694199483841658, 0.0061676055192947388, 0.0090524032711982727, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 577, 4419, -6651, 3956, 2382, 4170, 2696, 9815, 10356, 5353, -1938, -297, 921, 2849, 3024, -696, 150, 5065, 10774, 484, 2666, 7240, 2472, 4074, 13535, 5938, 1443, 8395, 2193, 3830, -1835, 6397, 1030, 7284, 8396, 4205, 99561, 10262, 4755, 11003, 3065, 626, 3858, 1514, 3126, 1736, 2166, 3548, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00037454525590874255, 0.00016956261242739856, 0.00011996734974673018, 0.0001540348312119022, 0.00019966338004451245, 0.0001516398333478719, 0.00019117076590191573, 8.9876710262615234e-05, 9.2348651378415525e-05, 0.0001355677522951737, 0.00018339285452384502, 0.00018220304627902806, 0.00022689771139994264, 0.00021016452228650451, 0.00019092987349722534, 0.00014905341959092766, 0.0002512639039196074, 0.0001347928773611784, 9.0132969489786774e-05, 0.00023842400696594268, 0.00019163409888278693, 0.00010861498594749719, 0.00021234521409496665, 0.00016491643327753991, 6.6204331233166158e-05, 0.0001463871740270406, 0.00017389004642609507, 0.00011087760503869504, 0.00010951181320706382, 0.00020611510262824595, 0.00025962019572034478, 0.00012585733202286065, 0.00034361737198196352, 0.00011005134729202837, 8.6781561549287289e-05, 0.00017691659741103649, 1.5904981410130858e-05, 9.5233401225414127e-05, 0.00012014261301374063, 8.6738982645329088e-05, 0.00013335370749700814, 0.00031341036083176732, 0.00018073960382025689, 0.00014867442951072007, 0.00020994871738366783, 0.00015082690515555441, 0.00018082121096085757, 0.00010678224498406053, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -78,-127,-32,31,-34,-10,54,-53, 
  /* [1][0][][] */ -15,127,38,-83,1,-91,-69,97, 
  /* [2][0][][] */ -127,-60,44,15,72,8,36,-20, 
  /* [3][0][][] */ -2,-39,-127,-60,26,-56,-31,60, 
  /* [4][0][][] */ -51,-111,101,-25,127,-58,59,0, 
  /* [5][0][][] */ -21,62,54,-97,111,44,-58,127, 
  /* [6][0][][] */ -127,93,54,75,-46,5,44,-121, 
  /* [7][0][][] */ 40,-12,69,24,52,-127,-7,113, 
  /* [8][0][][] */ 0,72,-5,-32,14,99,127,-70, 
  /* [9][0][][] */ 75,127,17,-70,-74,-55,-58,104, 
  /* [10][0][][] */ 27,-12,33,-3,-24,38,-127,-74, 
  /* [11][0][][] */ -75,16,-113,-78,127,18,43,70, 
  /* [12][0][][] */ 94,39,-32,-3,127,88,15,2, 
  /* [13][0][][] */ -127,-120,-8,62,-108,44,74,13, 
  /* [14][0][][] */ -9,90,-84,114,-49,127,-20,28, 
  /* [15][0][][] */ -5,-67,-23,-73,127,67,-26,48, 
  /* [16][0][][] */ 79,-87,3,45,41,-13,40,-127, 
  /* [17][0][][] */ -87,-84,-118,112,8,101,80,-127, 
  /* [18][0][][] */ 69,-12,127,4,-33,-104,-82,-34, 
  /* [19][0][][] */ -24,127,21,28,104,-113,-71,-28, 
  /* [20][0][][] */ -71,-9,-127,-34,28,-5,2,-1, 
  /* [21][0][][] */ -127,-25,58,52,-76,-117,115,-52, 
  /* [22][0][][] */ 59,-3,-127,-65,-28,-2,-9,43, 
  /* [23][0][][] */ -28,25,127,-18,-83,39,-12,-90, 
  /* [24][0][][] */ -97,90,94,107,127,100,-7,-41, 
  /* [25][0][][] */ -46,-127,-80,43,-61,34,59,-8, 
  /* [26][0][][] */ 112,125,-116,-70,-127,-14,-60,33, 
  /* [27][0][][] */ 53,48,-63,21,-127,22,-30,-12, 
  /* [28][0][][] */ -32,55,17,-79,82,88,-127,-108, 
  /* [29][0][][] */ 39,-8,0,-81,-127,13,10,-53, 
  /* [30][0][][] */ -85,-1,37,127,50,21,-39,-22, 
  /* [31][0][][] */ 15,-106,5,-75,-127,47,-52,-98, 
  /* [32][0][][] */ -127,-1,29,-10,4,-36,4,27, 
  /* [33][0][][] */ 50,-66,-127,-99,-5,11,-47,15, 
  /* [34][0][][] */ 61,100,127,7,-112,-54,64,-82, 
  /* [35][0][][] */ 100,31,14,14,-116,-47,-127,-47, 
  /* [36][0][][] */ 127,3,91,-47,4,-19,67,93, 
  /* [37][0][][] */ 127,114,-1,-1,74,74,-111,29, 
  /* [38][0][][] */ -37,103,117,127,-22,79,27,-94, 
  /* [39][0][][] */ 32,55,127,-44,88,-55,-40,9, 
  /* [40][0][][] */ 79,40,35,2,-79,-127,30,-50, 
  /* [41][0][][] */ 36,-46,12,127,-19,70,3,69, 
  /* [42][0][][] */ -21,-116,70,-36,127,-30,87,20, 
  /* [43][0][][] */ 2,-26,-97,-31,127,52,-82,120, 
  /* [44][0][][] */ 92,-16,127,-1,-2,33,-45,14, 
  /* [45][0][][] */ -25,24,31,-23,-105,-127,-15,92, 
  /* [46][0][][] */ -58,94,77,42,-14,-32,52,-127, 
  /* [47][0][][] */ 49,-6,14,127,-8,-121,76,60, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0064085717312991619, 0.002901262603700161, 0.0020526740700006485, 0.0026355779264122248, 0.0034162949305027723, 0.0025945990346372128, 0.0032709839288145304, 0.0015378150856122375, 0.0015801106346771121, 0.0023196011316031218, 0.003137901658192277, 0.0031175438780337572, 0.0038822817150503397, 0.0035959724336862564, 0.0032668621279299259, 0.0025503446813672781, 0.00429919408634305, 0.0023063428234308958, 0.0015421996358782053, 0.0040794997476041317, 0.0032789118122309446, 0.0018584320787340403, 0.0036332844756543636, 0.0028217651415616274, 0.0011327741667628288, 0.0025047245435416698, 0.0029753062408417463, 0.0018971461104229093, 0.0018737770151346922, 0.0035266857594251633, 0.0044421725906431675, 0.0021534531842917204, 0.0058793867938220501, 0.0018830085173249245, 0.0014848562423139811, 0.0030270912684500217, 0.00027213856810703874, 0.0016294694505631924, 0.0020556729286909103, 0.0014841275988146663, 0.0022817184217274189, 0.005362536758184433, 0.0030925038736313581, 0.0025438601151108742, 0.003592279739677906, 0.0025806894991546869, 0.0030939001590013504, 0.0018270732834935188, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 3594, -2566, 13619, -7740, -11649, -13604, -7763, -1857, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 8.5837098595220596e-05, 0.00012292123574297875, 0.00014175611431710422, 0.00012229973799549043, 0.00014993321383371949, 0.00011830217408714816, 0.00021513100364245474, 0.00024327712890226394, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -18,-29,43,-49,59,87,64,95,103,-46,-17,54,-31,-23,19,-14,46,47,10,-48,-34,18,-81,-41,27,-12,18,-76,-37,24,48,28,29,44,59,19,117,-49,-77,9,-50,-64,-25,-4,-66,-86,-127,54, 
  /* [1][0][][] */ -16,-2,-40,46,-2,15,-40,-14,-60,23,13,87,-29,2,-23,127,37,56,11,-28,-43,-22,-67,21,15,-6,-15,-83,46,-9,-53,-64,59,-28,-33,-52,34,32,48,-46,9,65,51,-38,-1,-41,-55,-21, 
  /* [2][0][][] */ 6,-72,-27,-6,-33,16,4,9,112,19,-6,-17,-25,-72,36,9,-1,-61,-26,-4,-104,49,6,29,6,44,-40,-23,-18,-37,41,-47,-101,25,-48,53,-67,63,-21,-27,127,-20,-2,41,28,39,-56,-38, 
  /* [3][0][][] */ -30,-114,94,60,25,-103,-21,-11,-125,127,60,-54,52,11,-17,24,60,34,-27,51,75,85,32,-62,9,86,66,31,-25,-70,14,16,-23,6,49,14,-13,-87,-45,37,-23,-9,23,-67,-77,15,-2,27, 
  /* [4][0][][] */ -8,58,-13,72,32,2,12,-4,-52,77,47,77,2,19,60,11,5,-106,-8,-17,93,-10,-101,60,75,-23,28,26,46,23,-15,-57,-55,127,6,13,57,-24,24,24,-29,43,-3,-24,0,-47,-30,20, 
  /* [5][0][][] */ -23,4,-2,-69,-127,30,124,25,17,61,-24,-26,-105,-5,62,-39,-83,44,-57,-93,4,110,-7,38,113,25,-4,16,-24,-15,126,-58,-7,105,85,85,-22,50,94,45,-31,-44,-32,37,-65,59,32,61, 
  /* [6][0][][] */ 0,-24,-9,26,-53,-51,13,2,21,-12,40,8,-54,-26,36,56,7,-59,8,-57,70,-23,0,-32,9,-1,10,36,41,1,10,127,45,-13,-14,22,5,-10,19,13,-1,34,-27,-48,-2,-26,-24,39, 
  /* [7][0][][] */ -25,-18,-46,-3,9,-24,3,11,39,5,24,-3,-8,11,3,1,32,-4,1,-3,-61,8,11,-26,-2,-7,-54,-13,-14,-18,20,31,20,-11,27,12,-20,127,-15,-38,-39,0,-44,-35,25,63,-71,-14, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0036480766721069813, 0.0052241524681448936, 0.0060246349312365055, 0.0051977387629449368, 0.0063721612095832825, 0.0050278422422707081, 0.0091430675238370895, 0.010339277796447277, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -373, 30362, 27874, 1199, 1948, -12266, 20719, 19743, -10239, 408, -729, 15642, 20825, -13641, -11045, -1687, 1995, 29058, -402, -284, 61415, 9356, -6805, -5344, 16974, 11226, -1625, -224, -4719, -74, 32368, 1246, -1162, 8521, 12397, 13103, -536, 43923, -7335, 459, 24744, -127, -2877, 15346, 721, -715, -5214, 13457, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00025689232279546559, 0.00011057685333071277, 0.00010109674622071907, 7.8069548180792481e-05, 4.8410609451821074e-05, 0.00011144517338834703, 0.00011233748227823526, 7.8993136412464082e-05, 0.00027789513114839792, 6.5904583607334644e-05, 0.00022674776846542954, 6.6727327066473663e-05, 0.00010068367555504665, 0.00018748792354017496, 7.4564530223142356e-05, 7.617129449499771e-05, 7.185988943092525e-05, 0.00013772280362900347, 0.00068412127438932657, 9.7550626378506422e-05, 3.7363672163337469e-05, 7.0838337705936283e-05, 5.6097094784490764e-05, 0.00015236844774335623, 7.4462594056967646e-05, 9.4939932751003653e-05, 0.00027423287974670529, 0.00018159477622248232, 0.00010360710439272225, 0.00016849837265908718, 0.00011716147855622694, 7.9981044109445065e-05, 5.5421260185539722e-05, 9.0713074314408004e-05, 8.7542597611900419e-05, 9.3429669504985213e-05, 8.0148856795858592e-05, 8.7861255451571196e-05, 0.00012664403766393661, 9.0278699644841254e-05, 0.00013645683065988123, 0.00031270296312868595, 7.8831842984072864e-05, 9.4815462944097817e-05, 0.00013776299601886421, 0.00015282328240573406, 0.00023709445667918772, 0.00011118639667984098, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 55,-61,-33,46,104,33,-68,-97,15,48,105,-69,-47,65,87,47,65,-82,65,86,-99,-81,43,84,-62,-16,70,67,84,111,-51,59,46,-71,-111,-62,52,-57,79,15,-83,53,49,-84,65,111,61,-73, 80,-78,-61,75,127,42,-61,-103,28,62,103,-93,-89,80,95,75,59,-104,57,104,-87,-105,66,93,-73,-51,103,88,97,127,-64,78,61,-87,-127,-72,72,-75,77,37,-105,61,43,-86,97,113,66,-99, 45,-53,-50,27,47,-4,-27,-66,17,13,11,-43,-68,32,37,27,9,-24,30,16,-23,-88,32,39,-43,-6,46,29,41,62,-27,15,33,-65,-67,-43,19,-26,15,23,-33,27,11,-27,40,30,14,-55, 
  /* [0][1][][] */ 43,-103,-65,77,109,83,-115,-118,87,95,97,-92,-79,103,127,79,122,-94,43,127,-110,-127,85,118,-127,-77,109,96,98,108,-85,100,98,-127,-105,-125,82,-101,119,76,-103,94,101,-119,90,119,45,-85, 47,-127,-127,127,122,127,-127,-127,127,127,127,-127,-127,127,120,127,127,-127,51,115,-127,-118,127,127,-121,-127,127,127,127,102,-127,127,127,-120,-99,-127,127,-127,127,127,-127,127,127,-127,127,127,52,-127, -9,-81,-97,59,45,29,-60,-49,51,44,28,-68,-76,47,53,63,36,-25,20,29,-32,-90,67,72,-82,-17,25,59,61,29,-44,31,59,-115,-79,-72,50,-46,29,44,-26,62,41,-58,45,1,16,-70, 
  /* [0][2][][] */ -44,-60,-52,42,25,56,-50,-43,-92,50,18,-60,-62,32,60,52,48,-22,-83,49,-48,-50,52,48,-75,-64,58,44,42,9,-58,33,41,-74,-25,-30,36,-52,49,72,-28,39,73,-78,38,19,-103,-28, -127,-83,-93,68,36,83,-59,-36,-69,63,38,-54,-109,40,46,76,59,-30,-127,53,-66,-87,76,39,-77,-45,41,46,49,1,-80,41,59,-95,-18,-35,52,-63,49,100,-20,46,102,-84,49,-17,-127,-71, -70,-35,-72,36,13,28,-3,-16,-86,31,22,-33,-41,15,27,44,14,-5,-65,19,-32,-8,30,26,-56,5,9,20,27,-13,-33,14,20,-35,-7,-8,18,-23,-2,41,3,8,37,-27,15,-15,-56,-37, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.010917923413217068, 0.0046995161101222038, 0.0042966115288436413, 0.0033179556485265493, 0.0020574508234858513, 0.0047364197671413422, 0.0047743427567183971, 0.0033572081010788679, 0.011810543015599251, 0.0028009447269141674, 0.009636780247092247, 0.0028359112329781055, 0.0042790560983121395, 0.0079682366922497749, 0.0031689924653619528, 0.0032372800633311272, 0.0030540451407432556, 0.0058532189577817917, 0.029075153172016144, 0.0041459016501903534, 0.0015879559796303511, 0.0030106294434517622, 0.0023841264192014933, 0.0064756586216390133, 0.0031646601855754852, 0.0040349471382796764, 0.011654897592961788, 0.0077177779749035835, 0.0044033019803464413, 0.007161180954426527, 0.0049793627113103867, 0.0033991944510489702, 0.0023554034996777773, 0.0038553054910153151, 0.0037205603439360857, 0.003970760852098465, 0.0034063262864947319, 0.0037341034039855003, 0.0053823716007173061, 0.0038368445821106434, 0.0057994150556623936, 0.013289876282215118, 0.0033503533340990543, 0.0040296572260558605, 0.0058549270033836365, 0.0064949896186590195, 0.010076514445245266, 0.004725421778857708, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -1478, 4685, 3705, -637, 59, 7880, 2861, 1316, 8525, 1130, -2039, 1344, 2724, 1219, -233, 742, -1282, 6671, -3054, -742, 672, 911, 322, -463, 48, 2361, -1359, -1268, -493, -2192, 11752, 2744, 500, 651, 263, 1029, 967, 6470, 1173, 465, 4949, -1630, 573, 1171, -1365, -1598, 11690, 2361, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00035330545506440103, 0.00018850254127755761, 0.00021218661277089268, 0.00037058506859466434, 0.00065305887255817652, 0.00011146018368890509, 0.00030544033506885171, 0.00033411820186302066, 0.00011956347589148208, 0.0004936428158544004, 0.0002352958545088768, 0.00035744585329666734, 0.00024699952336959541, 0.00036917335819453001, 0.00046911698882468045, 0.00028778248815797269, 0.00030806480208411813, 0.00014400712097994983, 0.00015705375699326396, 0.00042798923095688224, 0.0005238695302978158, 0.00031680450774729252, 0.00039240004844032228, 0.0002846321149263531, 0.00045602064346894622, 0.00023399060592055321, 0.0003073165426030755, 0.00025148483109660447, 0.0004338697181083262, 0.00021114399714861065, 9.814483200898394e-05, 0.00025223480770364404, 0.00042909107287414372, 0.00046436136472038925, 0.00034426490310579538, 0.0003274022601544857, 0.00027592788683250546, 0.00014199054567143321, 0.00041483240784145892, 0.00031386816408485174, 0.00019603561668191105, 0.00015147298108786345, 0.00042654716526158154, 0.00035353982821106911, 0.00037924191565252841, 0.00028087134705856442, 9.3989408924244344e-05, 0.00023109432368073612, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 38,27,-52,11,-34,47,-127,30, 
  /* [1][0][][] */ 1,-62,-114,-3,-9,-16,127,-111, 
  /* [2][0][][] */ -122,-56,-68,-47,-37,58,-127,1, 
  /* [3][0][][] */ -57,-34,20,-16,-22,-127,-113,-21, 
  /* [4][0][][] */ -48,-127,-47,19,58,26,-40,-40, 
  /* [5][0][][] */ 73,-33,91,61,-127,65,-72,-100, 
  /* [6][0][][] */ 39,-127,-61,-33,-8,64,-46,-83, 
  /* [7][0][][] */ -22,-80,-64,-67,82,-127,-1,14, 
  /* [8][0][][] */ 41,62,47,67,37,-56,-1,127, 
  /* [9][0][][] */ -24,-55,-55,5,49,-17,127,-14, 
  /* [10][0][][] */ -28,14,-127,23,19,22,97,-115, 
  /* [11][0][][] */ 6,-39,-33,-2,-127,18,7,54, 
  /* [12][0][][] */ 98,58,-18,36,-82,127,85,-8, 
  /* [13][0][][] */ -49,-5,19,-20,41,-127,-6,73, 
  /* [14][0][][] */ -109,-48,5,36,13,68,-127,-121, 
  /* [15][0][][] */ 55,86,52,1,-127,50,110,-52, 
  /* [16][0][][] */ -7,-60,7,80,-15,-64,8,-127, 
  /* [17][0][][] */ -78,127,22,-15,-60,-50,-85,-77, 
  /* [18][0][][] */ 106,127,-84,-110,101,105,-95,-90, 
  /* [19][0][][] */ -28,83,-16,8,-127,8,-71,-97, 
  /* [20][0][][] */ -127,-6,9,16,20,24,104,49, 
  /* [21][0][][] */ -33,0,50,14,-87,-105,-127,27, 
  /* [22][0][][] */ -4,-34,-44,-5,-127,2,7,56, 
  /* [23][0][][] */ 59,7,-20,-17,127,63,-94,88, 
  /* [24][0][][] */ 127,4,-49,31,-105,13,11,-1, 
  /* [25][0][][] */ 29,-50,54,104,-42,-127,21,108, 
  /* [26][0][][] */ 18,127,5,56,72,-15,20,-16, 
  /* [27][0][][] */ -127,115,56,-21,118,-64,0,99, 
  /* [28][0][][] */ -73,-74,-57,-37,82,-127,22,-16, 
  /* [29][0][][] */ -64,-21,42,50,127,-93,-96,83, 
  /* [30][0][][] */ 127,56,-124,-114,-74,-88,-82,-72, 
  /* [31][0][][] */ 27,1,41,65,-127,8,35,2, 
  /* [32][0][][] */ 127,15,57,45,-39,-58,91,60, 
  /* [33][0][][] */ 120,25,-39,7,-127,-59,24,52, 
  /* [34][0][][] */ 42,-9,-20,18,-40,127,19,-78, 
  /* [35][0][][] */ 119,40,-21,-43,45,-94,27,127, 
  /* [36][0][][] */ -35,-43,73,-95,-28,-11,79,-127, 
  /* [37][0][][] */ 74,-62,56,42,112,-13,33,-127, 
  /* [38][0][][] */ 69,127,7,-28,-22,18,23,76, 
  /* [39][0][][] */ 24,5,-79,66,-22,-64,-80,127, 
  /* [40][0][][] */ -12,-33,-1,-31,25,-127,19,42, 
  /* [41][0][][] */ -28,51,-127,-66,95,115,60,-113, 
  /* [42][0][][] */ 29,-42,-40,9,80,127,36,51, 
  /* [43][0][][] */ 5,43,-23,32,-127,-72,55,-64, 
  /* [44][0][][] */ -127,-51,-10,-39,51,57,-109,-71, 
  /* [45][0][][] */ -62,58,-57,16,32,-4,-68,127, 
  /* [46][0][][] */ -27,46,127,-5,-62,-53,-47,46, 
  /* [47][0][][] */ -127,-109,-43,-53,109,108,-33,85, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0029410291463136673, 0.0015691561857238412, 0.0017663100734353065, 0.0030848700553178787, 0.0054362737573683262, 0.00092783069703727961, 0.002542584203183651, 0.0027813082560896873, 0.00099528511054813862, 0.0041092429310083389, 0.0019586789421737194, 0.0029754950664937496, 0.0020561041310429573, 0.0030731186270713806, 0.0039050816558301449, 0.0023955947253853083, 0.0025644311681389809, 0.0011987619800493121, 0.0013073662994429469, 0.0035627209581434727, 0.0043608597479760647, 0.0026371832937002182, 0.0032664651516824961, 0.0023693698458373547, 0.0037960635963827372, 0.0019478135509416461, 0.0025582024827599525, 0.0020934410858899355, 0.0036116719711571932, 0.0017576310783624649, 0.00081698939902707934, 0.0020996842067688704, 0.0035718930885195732, 0.003865494392812252, 0.0028657724615186453, 0.0027254023589193821, 0.0022969131823629141, 0.0011819752398878336, 0.0034531992860138416, 0.0026127402670681477, 0.0016318639973178506, 0.0012609101831912994, 0.0035507166758179665, 0.0029429800342768431, 0.0031569325365126133, 0.0023380641359835863, 0.00078239827416837215, 0.0019237040542066097, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 12291, 13421, 3917, 3924, 1193, -13136, 5152, -7872, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00012391786731313914, 0.00010403864871477708, 0.00014170218491926789, 0.00020282217883504927, 0.00013157285866327584, 0.00012730094022117555, 7.1301605203188956e-05, 0.00012085167691111565, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 35,-44,101,69,27,-41,21,6,-6,53,-32,12,-47,-83,39,7,-108,62,-36,62,-45,65,-1,-28,-2,-46,68,-30,-24,20,-35,106,-62,-11,-32,-86,-65,-44,-39,-17,-10,57,-127,11,55,25,24,50, 
  /* [1][0][][] */ -53,-35,59,-9,-31,26,-35,-33,43,-12,-4,-30,-20,12,1,23,0,19,13,-6,-55,-29,-68,-24,24,-39,-33,-35,21,-69,-9,-127,-8,-60,-64,-69,-42,-87,-26,23,38,-17,80,-105,-50,-12,-24,-6, 
  /* [2][0][][] */ -58,96,-8,40,16,8,22,-36,74,-46,73,86,102,15,34,-56,101,-2,9,37,-13,19,20,127,-112,-41,13,-22,0,89,-19,-86,-23,2,10,-83,-19,8,-39,-14,92,-85,25,-6,29,-121,2,-18, 
  /* [3][0][][] */ 65,-20,-57,34,84,-85,4,-120,-32,-7,-57,-92,-21,127,-14,17,-44,-19,-66,-49,29,77,-12,-52,111,42,55,-64,37,-94,54,-60,57,63,116,-73,-38,20,-24,46,21,89,-76,31,-6,28,4,33, 
  /* [4][0][][] */ -51,28,-43,64,90,-32,26,-47,-39,-8,-62,37,-48,-18,2,-57,15,61,-34,-36,-41,38,-65,-68,22,-7,16,-38,30,-33,-31,59,-4,72,-73,-71,-66,-66,-40,1,64,-58,127,22,3,90,-53,-54, 
  /* [5][0][][] */ 54,10,84,-9,-4,23,54,35,127,-1,69,-1,72,54,27,-63,-14,33,34,-47,-56,-69,13,43,23,-14,26,41,-39,-29,17,-22,-21,54,-21,61,50,3,-28,-47,-12,70,34,37,-19,-8,73,11, 
  /* [6][0][][] */ -8,-63,-19,16,40,-2,2,14,-46,-18,111,57,101,75,-34,50,117,-127,-18,-5,-13,-41,-112,37,-83,69,-32,0,-16,-55,70,-50,92,18,-73,-24,-43,9,59,6,82,-70,-9,-75,-110,44,-46,26, 
  /* [7][0][][] */ -11,-27,-59,-31,19,104,-1,-4,-8,-52,-127,-103,46,51,-58,-46,-36,26,104,27,-15,-78,62,-12,115,-28,-74,92,-40,-5,-25,-82,-47,72,54,114,92,-55,-21,-36,-24,-5,42,-19,-1,-25,3,-58, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0052665090188384056, 0.0044216425158083439, 0.0060223424807190895, 0.0086199427023530006, 0.0055918465368449688, 0.0054102898575365543, 0.0030303183011710644, 0.0051361960358917713, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -894, 934, 24, 690, 675, 8646, 177, -4036, -4537, -523, -7156, 123, -3308, -6112, -50, -314, -7269, 15177, -3061, 64, -1234, 232, -1322, -905, 21748, -264, -476, -587, 156, 824, -177, -8475, 491, 13473, -702, 7545, -377, -2502, -1046, -243, -3536, -558, 3976, 5247, 1203, 8357, -393, -2037, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00034985371166840196, 0.00013044853403698653, 0.00065333890961483121, 0.00012012640218017623, 0.00012817360402550548, 0.00029538277885876596, 0.00025043886853381991, 0.00016661743575241417, 0.00043225268018431962, 0.00014613143866881728, 0.00046604929957538843, 0.00022361625451594591, 0.00011630693188635632, 0.00017129554180428386, 0.00014768674736842513, 0.00059768889332190156, 0.00033161899773404002, 9.6214665973093361e-05, 0.00010401498002465814, 0.00046581181231886148, 0.00025425432249903679, 0.00033514303504489362, 0.0001887220423668623, 0.00075372424907982349, 0.00025123663363046944, 0.00036142862518317997, 0.00019754581444431096, 0.00011653840192593634, 0.00019158647046424448, 0.00016866730584297329, 0.00045758282067254186, 0.0005278454627841711, 0.0005651729297824204, 0.00013036535528954118, 0.00056030339328572154, 0.00017006519192364067, 0.00018284448015037924, 7.5940632086712867e-05, 0.00055211060680449009, 0.00089516403386369348, 0.0002558140258770436, 0.00093451072461903095, 0.00061758200172334909, 0.00017536291852593422, 0.00024368555750697851, 0.00011616318806773052, 0.00020981526176910847, 0.00033192435512319207, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -5,-41,38,-35,127,-3,-14,-10,-33,40,-11,11,71,15,127,-38,11,-22,-33,-13,-28,-21,-66,26,-123,46,24,-42,-17,15,-16,-5,-33,31,20,5,85,61,34,-5,63,15,-14,0,-101,-11,-43,-37, 3,-92,-71,-37,-50,-4,35,27,17,-7,61,127,-8,52,-72,127,-4,-56,40,-52,-68,-127,-83,82,-127,-84,17,127,12,33,124,6,-127,-116,-44,40,127,-85,124,12,64,-12,-24,-7,-57,-17,73,5, 15,-16,-13,127,46,6,-84,2,-25,-46,-20,-16,48,-3,-64,-46,23,16,-1,-8,4,-2,-32,16,-57,-63,-28,39,-4,25,-92,-6,13,72,20,23,5,84,-127,3,31,-6,-9,29,-127,0,-53,49, 
  /* [0][1][][] */ -116,-64,127,-11,-41,-34,76,21,18,89,10,15,52,22,103,30,29,-127,86,40,80,-11,58,-37,-10,-20,35,-47,21,54,37,56,32,-107,5,127,11,46,-41,-115,24,89,-19,-87,26,-85,-63,19, 127,-60,-71,-81,4,-127,127,127,127,11,127,-42,-127,18,-43,-43,127,-94,127,127,127,78,127,-127,2,-23,106,-16,127,127,-127,127,27,-127,127,-95,-63,127,-99,122,-127,-127,127,-127,94,-127,127,-118, -14,-108,14,75,-26,-10,-51,13,-14,-127,-30,50,81,6,-63,43,22,-3,0,15,3,-25,40,-21,-6,10,-127,74,-67,6,79,20,-15,-114,-14,-37,63,11,127,12,33,50,-43,6,53,-32,-56,127, 
  /* [0][2][][] */ -8,124,30,-37,72,15,-44,-13,-29,18,-4,-1,56,23,91,9,-18,-8,-11,-46,-14,7,4,17,-27,-17,31,4,-54,-108,-8,1,-7,52,-17,34,-54,48,16,103,10,20,-4,7,19,-7,-14,-41, 3,100,-44,14,29,-31,-2,36,31,9,27,-34,41,127,-76,-75,-2,-32,99,-78,-44,73,2,57,67,127,7,127,-69,-110,-15,1,90,-120,-81,3,-65,-41,-27,-127,51,-20,-57,77,47,15,21,9, 15,127,-12,31,23,8,-64,1,-22,-18,-2,-5,56,1,-71,-1,-10,-6,-35,-27,-5,2,-1,4,-54,32,-41,8,38,-80,22,3,4,52,3,-15,-42,63,14,1,-26,-4,1,-14,11,-1,-2,34, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014868782833218575, 0.0055440627038478851, 0.02776690386235714, 0.0051053720526397228, 0.0054473779164254665, 0.01255376823246479, 0.010643651708960533, 0.0070812408812344074, 0.018370738252997398, 0.0062105860561132431, 0.01980709470808506, 0.0095036905258893967, 0.0049430443905293941, 0.0072800600901246071, 0.0062766866758465767, 0.025401778519153595, 0.014093806967139244, 0.0040891231037676334, 0.0044206366874277592, 0.019797001034021378, 0.010805808939039707, 0.014243578538298607, 0.0080206869170069695, 0.032033279538154602, 0.01067755650728941, 0.015360716730356216, 0.0083956969901919365, 0.0049528819508850574, 0.0081424247473478317, 0.0071683600544929504, 0.019447268918156624, 0.022433431819081306, 0.024019848555326462, 0.0055405274033546448, 0.023812893778085709, 0.0072277705185115337, 0.0077708903700113297, 0.003227476729080081, 0.02346470020711422, 0.03804447129368782, 0.010872095823287964, 0.039716705679893494, 0.026247235015034676, 0.0074529238045215607, 0.01035663578659296, 0.0049369353801012039, 0.0089171482250094414, 0.014106784947216511, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 4623, 1784, 22646, -2072, -1430, 5028, -549, 797, 2359, 53, 5420, 265, 1848, 2940, 2271, 3398, 2346, 2134, -508, 4050, 1081, 268, 978, 11369, 18712, 3578, 3039, -1028, -90, 5280, 6111, 8688, 11112, 4340, 6415, -995, 363, 2344, 8605, 4943, 582, 11070, 13243, 2781, 6353, 1604, 2929, 594, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00018744049884844571, 0.00029299833113327622, 5.5755303037585691e-05, 0.00025571760488674045, 0.00030591755057685077, 0.00020570961351040751, 0.0003043718752451241, 0.00068755517713725567, 0.0002741101779974997, 0.00031890341779217124, 0.00015687140694353729, 0.00049310288159176707, 0.00026618430274538696, 0.00025699377874843776, 0.00024231304996646941, 0.00023443167447112501, 0.00019888553651981056, 0.00023745516955386847, 0.00048816215712577105, 0.00020928555750288069, 0.00033485979656688869, 0.00041098016663454473, 0.00032240510336123407, 8.9156281319446862e-05, 8.4182807768229395e-05, 0.00023886225244496018, 0.00026121721020899713, 0.00035329442471265793, 0.00079228566028177738, 0.00016448460519313812, 0.00015011044160928577, 0.00011517760867718607, 9.0053625172004104e-05, 0.00019573516328819096, 0.00013911629503127187, 0.00022550563153345138, 0.00036876078229397535, 0.00018342425755690783, 0.00010770138032967225, 0.00017588491027709097, 0.00026303488994017243, 9.0795503638219088e-05, 8.6627609562128782e-05, 0.0002866025606635958, 0.00014937449304852635, 0.00039058795664459467, 0.00025915648438967764, 0.00033927554613910615, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -16,34,16,-127,-87,15,24,115, 
  /* [1][0][][] */ 102,1,-13,8,-96,47,127,29, 
  /* [2][0][][] */ -5,111,-37,-31,-38,82,-43,-127, 
  /* [3][0][][] */ 56,-65,-88,113,-127,-40,0,-21, 
  /* [4][0][][] */ 39,-62,46,-17,-127,-5,48,25, 
  /* [5][0][][] */ -19,52,-12,-94,-127,-1,-34,7, 
  /* [6][0][][] */ 46,-14,36,33,127,-25,-11,-117, 
  /* [7][0][][] */ 16,29,24,127,26,-9,-2,21, 
  /* [8][0][][] */ 24,25,10,-47,39,127,12,-30, 
  /* [9][0][][] */ 119,28,-15,16,-62,-53,127,75, 
  /* [10][0][][] */ 5,64,-71,-30,3,127,79,-59, 
  /* [11][0][][] */ -19,-34,-127,101,-59,29,-10,79, 
  /* [12][0][][] */ -93,-83,55,50,26,-127,-38,5, 
  /* [13][0][][] */ 40,34,33,51,-61,127,15,-41, 
  /* [14][0][][] */ 10,-99,4,-3,-61,-76,-127,101, 
  /* [15][0][][] */ -85,36,-2,10,92,-6,-127,-48, 
  /* [16][0][][] */ 97,80,-101,-123,52,127,115,37, 
  /* [17][0][][] */ -111,125,-127,45,-17,-28,22,-124, 
  /* [18][0][][] */ 36,-1,-91,127,-11,-39,-37,-60, 
  /* [19][0][][] */ 107,13,12,24,-37,5,127,38, 
  /* [20][0][][] */ 36,-78,-88,127,48,-27,-26,-63, 
  /* [21][0][][] */ 24,51,127,-102,44,-26,32,-101, 
  /* [22][0][][] */ -74,-38,-127,59,-26,35,14,115, 
  /* [23][0][][] */ 86,24,26,37,-127,119,69,-39, 
  /* [24][0][][] */ -12,-2,-127,80,-35,26,40,67, 
  /* [25][0][][] */ 50,-30,-72,127,56,6,-40,-18, 
  /* [26][0][][] */ -87,27,127,-109,-15,35,61,-10, 
  /* [27][0][][] */ -64,76,127,4,23,-12,76,15, 
  /* [28][0][][] */ -55,-94,34,-127,-20,12,-5,-22, 
  /* [29][0][][] */ -78,-78,-21,82,2,-127,-20,60, 
  /* [30][0][][] */ -127,52,125,-31,47,41,71,24, 
  /* [31][0][][] */ -60,50,82,-127,-42,19,31,61, 
  /* [32][0][][] */ -80,101,108,-125,15,11,8,127, 
  /* [33][0][][] */ 9,106,-45,54,23,19,-127,-31, 
  /* [34][0][][] */ 83,18,127,-110,-91,-104,49,-52, 
  /* [35][0][][] */ 85,-1,33,105,76,-72,31,-127, 
  /* [36][0][][] */ 25,64,127,-102,20,-27,45,-114, 
  /* [37][0][][] */ -54,-54,110,71,-3,-127,96,-16, 
  /* [38][0][][] */ 75,-4,75,47,-34,-47,127,17, 
  /* [39][0][][] */ 52,-81,-21,11,-127,7,69,63, 
  /* [40][0][][] */ -41,38,-127,100,-44,43,-71,107, 
  /* [41][0][][] */ -106,-17,-55,7,127,7,-87,5, 
  /* [42][0][][] */ -85,61,-29,-30,127,38,-118,-47, 
  /* [43][0][][] */ 127,119,-42,116,3,-92,50,75, 
  /* [44][0][][] */ -5,12,90,7,34,-127,21,-22, 
  /* [45][0][][] */ -8,-76,127,79,-31,-21,-116,21, 
  /* [46][0][][] */ 49,-116,-127,46,-77,30,-9,-19, 
  /* [47][0][][] */ -109,-30,50,1,84,41,-127,-43, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0028097433969378471, 0.0043920609168708324, 0.00083577504847198725, 0.0038332208059728146, 0.0045857210643589497, 0.0030835983343422413, 0.0045625511556863785, 0.010306489653885365, 0.004108926746994257, 0.0047803795896470547, 0.0023515110369771719, 0.007391639519482851, 0.0039901174604892731, 0.0038523508701473475, 0.0036322858650237322, 0.0035141436383128166, 0.0029813051223754883, 0.0035594659857451916, 0.007317577488720417, 0.0031372020021080971, 0.0050195665098726749, 0.006160615012049675, 0.004832870326936245, 0.0013364575570449233, 0.0012619049521163106, 0.0035805583465844393, 0.0039156600832939148, 0.005295902956277132, 0.011876405216753483, 0.0024656332097947598, 0.0022501638159155846, 0.0017265186179429293, 0.0013499087654054165, 0.0029340807814151049, 0.0020853609312325716, 0.0033803416881710291, 0.00552774453535676, 0.0027495396789163351, 0.0016144495457410812, 0.0026365243829786777, 0.0039429073221981525, 0.0013610295718535781, 0.0012985526118427515, 0.0042961882427334785, 0.0022391318343579769, 0.0058549349196255207, 0.0038847697433084249, 0.0050857588648796082, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -10998, 689, -15932, -1764, 4223, -419, 8300, 2305, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00019523678929544985, 0.00014681578613817692, 9.2966176453046501e-05, 6.0842598031740636e-05, 0.00020886669517494738, 0.00016085669631138444, 0.00014876155182719231, 0.00013369877706281841, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 49,106,-41,69,-1,-3,-22,8,64,-64,2,-28,12,8,-34,-54,-1,-20,30,15,-57,-30,-35,8,15,15,27,-4,16,10,-22,28,-63,8,114,-127,-22,21,-12,111,-32,16,12,-3,-15,37,28,-43, 
  /* [1][0][][] */ -1,-43,32,54,-12,-14,-17,-20,46,-42,91,43,21,11,-45,-78,127,42,17,10,-72,32,36,-15,-48,-90,-34,-49,-12,-59,44,-41,-13,-24,-31,10,8,-20,83,-51,-16,31,-59,38,75,60,18,46, 
  /* [2][0][][] */ 81,-29,-9,-18,109,114,59,77,-32,-10,-3,-31,-6,45,55,26,-27,-32,61,-71,-49,-48,-46,62,-91,-97,120,23,63,-68,-61,21,-127,87,109,21,-9,-3,-5,16,28,71,19,-62,-25,22,56,-45, 
  /* [3][0][][] */ 83,-35,15,-16,123,127,27,44,-32,-28,33,57,-126,39,67,19,1,12,77,-105,-89,21,39,92,4,-35,58,30,46,-58,4,-9,-115,64,-59,-117,26,-38,68,-50,55,-95,-108,-28,-62,39,-15,66, 
  /* [4][0][][] */ 34,41,-27,-38,-13,-12,-21,-16,5,-3,-10,-11,-33,-22,61,48,-41,-18,-34,45,28,-12,-13,3,-47,-41,-6,54,-11,13,-20,27,-32,-12,23,-127,-8,27,13,55,6,-13,-11,-22,44,3,84,-22, 
  /* [5][0][][] */ 65,60,-92,50,6,5,-9,31,-84,-60,-59,-23,33,20,43,28,38,-63,43,127,-70,-48,-56,48,31,-21,-36,65,33,29,-55,2,-5,1,-62,-2,-7,18,-25,72,14,73,-9,-41,123,27,18,-61, 
  /* [6][0][][] */ -30,-75,18,-45,-42,-38,-78,-81,-37,-64,-118,42,-56,-50,103,97,-127,11,25,-24,21,59,70,13,-13,-6,-73,88,-87,-41,43,81,16,-63,94,42,26,44,-12,-92,-19,-60,-29,16,-46,-19,-12,67, 
  /* [7][0][][] */ 73,17,-16,40,15,13,9,3,81,-7,-12,-19,57,6,-11,-20,-52,-8,-31,3,2,-22,-23,-24,66,-127,15,-3,0,93,-17,16,-73,21,-57,-47,-15,26,27,23,22,68,-35,-18,-41,30,44,-26, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0082975635305047035, 0.0062396707944571972, 0.003951062448322773, 0.0025858103763312101, 0.0088768340647220612, 0.00683640968054533, 0.0063223657198250294, 0.0056821978650987148, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 2194, 7007, 213, -3215, 232, 392, 6366, 7516, 2870, -5430, 649, -168, 5266, 3321, 19603, 14855, -2913, -972, 5379, 4812, 15959, 674, -253, -536, 7734, 1796, 6162, 18601, 6515, 11572, 1, 3189, 78, -3141, -1650, 3343, -396, 151, 1029, 2932, 2523, 2754, -6123, 562, 1466, -123, 9306, -1115, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.3664595624431968e-05, 0.0001363066112389788, 0.0006952495314180851, 9.4378599897027016e-05, 0.00069676426937803626, 0.00098080642055720091, 0.00016154750483110547, 0.0001925489486893639, 5.9993450122419745e-05, 0.00029229043866507709, 0.00049257470527663827, 0.00033260401687584817, 0.00022325602185446769, 0.00016673847858328372, 6.601399218197912e-05, 6.2091334257274866e-05, 0.00016333769599441439, 0.00069032656028866768, 5.7054487115237862e-05, 8.9911431132350117e-05, 6.602914072573185e-05, 0.0009492709650658071, 0.0013874315191060305, 0.00029829551931470633, 4.5019118260825053e-05, 0.0001744730252539739, 8.5083578596822917e-05, 0.00014985848974902183, 0.00018559230375103652, 0.00014376679609995335, 0.00057687470689415932, 0.0001880022173281759, 0.00011232167162233964, 0.00029369627009145916, 7.2504808485973626e-05, 6.5120264480356127e-05, 0.00040825313772074878, 0.00036681140772998333, 9.671926818555221e-05, 0.0001883369404822588, 0.00011483774142106995, 0.00024707440752536058, 0.00013694001245312393, 0.00041233943193219602, 0.00010027294774772599, 0.00038007722469046712, 7.6677541073877364e-05, 0.00095168582629412413, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -16,-83,-103,85,-86,4,-86,-72,49,82,124,-38,7,8,-84,-59,96,-86,31,-45,-21,-112,-36,-79,76,93,0,-127,10,-42,61,88,57,65,59,18,90,93,33,14,-109,-5,33,44,-49,29,-34,-94, 84,-6,36,83,-127,42,-52,14,89,108,127,68,-7,-67,-127,-104,119,-39,96,-82,-98,125,127,33,127,89,45,-113,-73,-50,-108,125,106,127,93,104,-16,89,53,-69,-76,-78,21,-55,-62,109,-46,109, 101,-2,59,66,-79,11,-22,-8,18,74,-30,-27,-73,4,-44,-40,44,81,58,-12,-59,-28,-80,78,41,21,24,-39,-2,-40,28,50,53,98,5,67,0,27,40,-7,-47,-1,1,12,-24,60,-21,1, 
  /* [0][1][][] */ 44,-127,119,102,90,-72,-127,-127,110,95,115,-49,9,-3,-100,-90,98,127,45,-104,-50,110,27,-127,97,119,111,-124,2,-122,-77,91,111,-6,102,50,30,127,62,3,-3,-17,99,97,-110,64,-114,116, 127,-7,5,127,123,-127,-93,6,127,127,127,60,-29,-127,-108,-127,127,60,127,-127,-127,-127,-111,57,120,127,127,-116,-127,-123,127,127,127,5,127,127,-5,120,127,-127,15,-127,127,-85,-127,127,-125,-127, 93,-6,-127,72,87,-60,-36,-8,27,80,-6,-16,-127,3,-30,-31,49,-99,73,-34,-71,7,74,85,53,45,0,-46,-11,-78,-36,31,39,0,32,76,4,19,71,-2,-18,-3,39,-9,-69,42,-51,16, 
  /* [0][2][][] */ 63,-80,7,20,-1,64,-67,-83,39,17,-4,57,13,8,-33,-40,23,-40,22,-65,-23,-1,12,-78,24,39,81,-24,13,-124,14,10,62,-88,75,21,-127,25,2,-1,32,-4,84,-127,-77,21,-83,-8, 50,8,5,58,9,91,-26,0,30,51,-10,-127,-13,-78,-30,-47,41,-13,44,-95,-41,-14,-26,36,34,55,82,-45,-82,-127,-27,15,61,-93,70,33,21,33,54,-48,127,-63,115,103,-112,28,-127,20, -31,-8,-4,39,-20,38,-22,-3,11,25,-107,46,-70,3,-14,-8,10,24,30,-6,-41,21,18,43,22,33,26,0,-1,-62,15,-17,-4,-46,23,23,14,-30,38,13,67,2,23,-10,-30,14,-26,-1, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0039807450957596302, 0.0057930308394134045, 0.029548104852437973, 0.0040110903792083263, 0.029612481594085693, 0.04168427363038063, 0.0068657686933875084, 0.0081833302974700928, 0.0025497216265648603, 0.012422342784702778, 0.020934423431754112, 0.014135670848190784, 0.0094883805140852928, 0.0070863855071365833, 0.0028055945876985788, 0.0026388815604150295, 0.0069418521597981453, 0.029338877648115158, 0.0024248156696557999, 0.003821235615760088, 0.0028062383644282818, 0.040344014763832092, 0.058965839445590973, 0.01267755962908268, 0.001913312473334372, 0.0074151032604277134, 0.0036160519812256098, 0.0063689853996038437, 0.007887672632932663, 0.006110088899731636, 0.024517174810171127, 0.0079900939017534256, 0.0047736708074808121, 0.012482091784477234, 0.0030814541969448328, 0.0027676112949848175, 0.017350757494568825, 0.015589484013617039, 0.0041105686686933041, 0.008004319854080677, 0.0048806038685142994, 0.01050066202878952, 0.0058199507184326649, 0.017524424940347672, 0.0042616003192961216, 0.016153281554579735, 0.003258795477449894, 0.040446646511554718, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 9863, 4069, 7621, 2124, 3416, 3967, -3750, 3695, 2400, -2423, -3137, 4968, -3113, -4329, 7013, 1462, -1748, 2286, -1523, 2704, 464, 3856, 336, -2186, -307, -4434, 2484, -3364, 3290, 6952, 805, 343, 6796, 9475, 7230, 4067, 4583, -4012, 1094, 4054, -1010, -4202, 3647, 1972, 188, -5444, -10341, 2167, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00053834624122828245, 0.00071520736673846841, 0.00013400890748016536, 0.00087167858146131039, 0.00057530537014827132, 0.00045582884922623634, 0.0026093432679772377, 0.0015148224774748087, 0.0011953441426157951, 0.00059062114451080561, 0.00014367657422553748, 0.00055988918757066131, 0.00053738075075671077, 0.0013117102207615972, 0.00061688193818554282, 0.0019249762408435345, 0.0011373489396646619, 0.00033467600587755442, 0.0013310267822816968, 0.0022225212305784225, 0.00086145516252145171, 0.00049611611757427454, 0.00015891452494543046, 0.00055734417401254177, 0.001456756959669292, 0.00099645636510103941, 0.0012774196220561862, 0.00048599712317809463, 0.0012915852712467313, 0.00088266591774299741, 0.00031608020071871579, 0.00063179805874824524, 0.00098229432478547096, 0.00034779598354361951, 0.0005592049565166235, 0.0004210017214063555, 0.00060821091756224632, 0.0019796995911747217, 0.00063791620777919888, 0.0007204258581623435, 0.0014021374518051744, 0.00072417344199493527, 0.0010114642791450024, 0.00023256565327756107, 0.0016118566272780299, 0.00082803296390920877, 0.00094681972404941916, 0.00046670238953083754, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -97,-102,22,-127,-56,-8,-7,-1, 
  /* [1][0][][] */ -127,-12,92,-1,-50,25,5,18, 
  /* [2][0][][] */ 20,-16,19,127,18,-21,-21,0, 
  /* [3][0][][] */ -104,-73,-29,-17,41,127,-47,-34, 
  /* [4][0][][] */ -5,-28,-8,-3,-7,9,-127,-76, 
  /* [5][0][][] */ -3,-34,-13,-3,-10,10,-127,-74, 
  /* [6][0][][] */ 127,7,13,-10,-63,19,3,-6, 
  /* [7][0][][] */ -127,-29,-19,4,73,15,0,10, 
  /* [8][0][][] */ 23,40,-13,-11,-28,-127,39,19, 
  /* [9][0][][] */ 73,22,-12,-6,-25,-3,-9,127, 
  /* [10][0][][] */ 119,-12,-124,10,-91,-11,39,127, 
  /* [11][0][][] */ -127,99,9,-43,90,-75,6,26, 
  /* [12][0][][] */ 127,-32,-111,10,57,-2,-6,-24, 
  /* [13][0][][] */ 127,10,12,-12,-25,29,8,-12, 
  /* [14][0][][] */ -116,-87,88,-19,76,-17,-46,-127, 
  /* [15][0][][] */ 34,73,2,-5,-8,-127,-18,7, 
  /* [16][0][][] */ -10,-66,9,2,12,127,10,6, 
  /* [17][0][][] */ 30,-127,-64,-3,-35,119,-55,-15, 
  /* [18][0][][] */ 42,-22,-18,-20,-19,26,127,-10, 
  /* [19][0][][] */ -5,25,-1,-127,-11,37,-3,-11, 
  /* [20][0][][] */ -79,-30,75,7,55,96,-1,-127, 
  /* [21][0][][] */ -20,-6,34,-25,-17,12,-127,-80, 
  /* [22][0][][] */ 65,-7,3,127,-18,-10,53,41, 
  /* [23][0][][] */ 127,-14,-118,-15,29,-27,10,7, 
  /* [24][0][][] */ -32,23,28,34,9,3,-127,-82, 
  /* [25][0][][] */ 127,12,-87,8,15,-5,7,25, 
  /* [26][0][][] */ -2,53,-30,-127,-29,20,1,-1, 
  /* [27][0][][] */ 127,15,-107,-1,-102,43,17,78, 
  /* [28][0][][] */ -127,-22,-24,16,57,13,-2,34, 
  /* [29][0][][] */ -7,-126,-15,-127,-9,26,-15,-23, 
  /* [30][0][][] */ -1,86,127,30,36,-101,107,35, 
  /* [31][0][][] */ -73,-7,-127,43,2,-25,98,104, 
  /* [32][0][][] */ -3,-123,1,-127,-12,13,-10,-18, 
  /* [33][0][][] */ 11,-127,-3,-127,6,12,2,-24, 
  /* [34][0][][] */ -29,-50,31,-99,36,-53,127,82, 
  /* [35][0][][] */ -127,9,49,5,-112,-19,31,93, 
  /* [36][0][][] */ -125,19,127,-7,-40,23,-26,31, 
  /* [37][0][][] */ 127,11,-5,-6,-73,19,0,17, 
  /* [38][0][][] */ -72,-3,81,38,66,-59,46,127, 
  /* [39][0][][] */ -127,-4,71,-2,-72,17,-8,9, 
  /* [40][0][][] */ -4,25,45,-10,25,-2,127,51, 
  /* [41][0][][] */ 127,-11,-75,2,54,17,8,-7, 
  /* [42][0][][] */ -14,-127,33,-7,16,7,-5,-19, 
  /* [43][0][][] */ 5,122,127,-9,57,-102,77,7, 
  /* [44][0][][] */ 8,-14,-4,119,1,-127,-2,3, 
  /* [45][0][][] */ 127,-33,36,-10,-63,103,7,4, 
  /* [46][0][][] */ 14,120,-17,99,0,127,25,40, 
  /* [47][0][][] */ -13,33,12,-27,28,-34,127,70, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0061434423550963402, 0.0081617273390293121, 0.0015292685711756349, 0.0099473288282752037, 0.0065652080811560154, 0.0052017788402736187, 0.029777025803923607, 0.017286689952015877, 0.013640900142490864, 0.006739987526088953, 0.0016395930433645844, 0.006389283575117588, 0.0061324243433773518, 0.014968834817409515, 0.0070396675728261471, 0.021967237815260887, 0.01297907717525959, 0.0038192200008779764, 0.015189268626272678, 0.025362730026245117, 0.0098306620493531227, 0.0056615248322486877, 0.0018134837737306952, 0.0063602407462894917, 0.01662406325340271, 0.011371254920959473, 0.01457752101123333, 0.0055460501462221146, 0.014739174395799637, 0.010072712786495686, 0.0036070102360099554, 0.0072098858654499054, 0.011209641583263874, 0.0039689410477876663, 0.0063814753666520119, 0.0048043425194919109, 0.0069407164119184017, 0.022591724991798401, 0.0072797038592398167, 0.0082212788984179497, 0.016000762581825256, 0.0082640452310442924, 0.011542520485818386, 0.002653967821970582, 0.018394013866782188, 0.0094492584466934204, 0.010804816149175167, 0.0053258645348250866, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 3782, -4288, 115, 2823, 1929, 318, -2412, 2357, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 7.1353148086927831e-05, 0.00016678287647664547, 9.8456846899352968e-05, 7.6946751505602151e-05, 0.0001401262852596119, 0.00019852326659020036, 0.00010627379379002377, 0.00020089191093575209, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -25,-5,-46,-35,-20,38,-127,-8, 
  /* [1][0][][] */ 19,91,1,127,8,-7,-8,-36, 
  /* [2][0][][] */ 127,-7,-35,-59,-70,51,98,-56, 
  /* [3][0][][] */ 10,-127,43,-79,14,-82,27,54, 
  /* [4][0][][] */ 126,-2,-59,-7,31,-6,-127,-51, 
  /* [5][0][][] */ 2,-33,3,37,2,-127,-2,9, 
  /* [6][0][][] */ 127,-29,117,0,108,-33,-5,5, 
  /* [7][0][][] */ -127,-5,-94,-4,-101,7,35,5, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.00303250877186656, 0.0070882723666727543, 0.0041844160296022892, 0.0032702367752790451, 0.0059553668834269047, 0.0084372386336326599, 0.0045166360214352608, 0.0085379062220454216, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -10628, 11990, 320, -12389, -468, -13686, 266, 142, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00036272121360525489, 0.00043110919068567455, 0.0002260405890410766, 0.00047790221287868917, 0.00058856135001406074, 0.00038434096495620906, 0.00138326664455235, 0.0026130634360015392, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ 0,0,13,15,9,0,8,29, 6,1,-37,127,-22,1,-4,28, -3,-2,-7,18,-2,2,-6,20, 
  /* [0][1][][] */ -5,-1,127,-26,127,-2,-112,39, 127,-127,-103,5,-92,127,-15,-127, -26,2,18,-21,-2,-1,127,37, 
  /* [0][2][][] */ 1,-1,13,2,9,-1,15,31, 4,1,-42,-2,-14,4,-10,-104, -4,-3,-6,2,0,0,-6,35, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.01541565079241991, 0.018322139978408813, 0.0096067246049642563, 0.020310843363404274, 0.025013856589794159, 0.016334490850567818, 0.058788832277059555, 0.11105519533157349, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 5871, 4585, 306, 27558, 3919, 5922, 87322, 3987, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00040879804873839021, 0.00043633152381516993, 0.00015157820598687977, 9.9239936389494687e-05, 0.0002402499521849677, 0.00035864522214978933, 1.8548273146734573e-05, 5.8264344261260703e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -56, 50, 9, 
  /* [0][1][][] */ -127, 122, 0, 
  /* [0][2][][] */ -42, 46, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -43, 
  /* [1][2][][] */ 7, -41, 6, 
  /* [2][0][][] */ 31, 27, -47, 
  /* [2][1][][] */ 52, 69, -127, 
  /* [2][2][][] */ 21, 32, -59, 
  /* [3][0][][] */ 41, 52, 19, 
  /* [3][1][][] */ 52, 73, 25, 
  /* [3][2][][] */ -81, -127, -58, 
  /* [4][0][][] */ 3, -53, 46, 
  /* [4][1][][] */ 15, -127, 111, 
  /* [4][2][][] */ 4, -37, 31, 
  /* [5][0][][] */ 2, -56, 1, 
  /* [5][1][][] */ 0, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -15, -83, 2, 
  /* [6][1][][] */ -27, -127, -5, 
  /* [6][2][][] */ -12, -54, 5, 
  /* [7][0][][] */ 47, -127, 33, 
  /* [7][1][][] */ -18, -2, -10, 
  /* [7][2][][] */ -22, 78, -9, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.13493448495864868, 0.1440226286649704, 0.050032347440719604, 0.032756734639406204, 0.079300776124000549, 0.11838023364543915, 0.0061223427765071392, 0.01923166960477829, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.078763730823993683, } };
const TfArray<1, int> quant46_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.087629415094852448, } };
const TfArray<1, int> quant47_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.066710896790027618, } };
const TfArray<1, int> quant51_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10329148173332214, } };
const TfArray<1, int> quant54_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.12012987583875656, } };
const TfArray<1, int> quant55_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.058444421738386154, } };
const TfArray<1, int> quant59_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.021818306297063828, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.0398578941822052, } };
const TfArray<1, int> quant62_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.06922893226146698, } };
const TfArray<1, int> quant63_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023338731378316879, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.046870041638612747, } };
const TfArray<1, int> quant66_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.079630665481090546, } };
const TfArray<1, int> quant67_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.024374239146709442, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.04857248067855835, } };
const TfArray<1, int> quant70_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
